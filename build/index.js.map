{"version":3,"sources":["../src/index.js"],"names":["Process","assert","isPromise","channels","call","callback","error","handshake","handshake_return","rmListeners","emitter","is","Object","values","forEach","channel","removeAllListeners","IpcFlux","options","env","type","Promise","actions","config","timeout","instance","_actions","create","actionEmitHandler","event","arg","actionExists","action","target","getCurrentWindow","id","act","dispatchAction","payload","then","data","sender","send","process","emitterCallListener","callType","on","err","Error","message","console","warn","log","dispatchExternalAction","dispatch","dispatchExternal","resolve","listener","removeListener","keys","registerAction","debug","done","total","completed","targets","beginHandshake","handshakeListener","push","mainHandshakeListener","indexOf","setTimeout","getAllWebContents","win","rendererHandshakeListener","_caller","_action","_payload","entry","length","all","map","handler","_target","fromId","webContents","Array","isArray","cb","res"],"mappings":"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","file":"index.js","sourcesContent":["import { ipcMain, ipcRenderer, webContents, remote } from 'electron';\n\nimport utils from './utils';\nconst { Process, assert, isPromise } = utils;\n\n// predefined channels\nconst channels = {\n\tcall: 'IpcFlux-Call',\n\tcallback: 'IpcFlux-Callback',\n\terror: 'IpcFlux-Error',\n\thandshake: 'IpcFlux-Handshake',\n\thandshake_return: 'IpcFlux-HandshakeReturn'\n};\n\n// remove all active IpcFlux listeners for the current process\nconst rmListeners = () => {\n\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\tObject.values(channels).forEach((channel) => {\n\t\temitter.removeAllListeners(channel);\n\t});\n}\n\nclass IpcFlux {\n\tconstructor(options = {}) {\n\t\tif (Process.env.type() !== 'production') {\n\t\t\t// check if Promises can be used\n\t\t\tassert(typeof Promise !== 'undefined', 'IpcFlux requires Promises to function.');\n\t\t\tassert(this instanceof IpcFlux, 'IpcFlux must be called with the new operator.');\n\t\t}\n\n\t\t// remove IpcFlux listeners\n\t\trmListeners();\n\n\t\tconst { actions={}, config={} } = options;\n\n\t\tthis.config = {\n\t\t\thandshake: {\n\t\t\t\ttimeout: 10000\n\t\t\t},\n\t\t\t...config\n\t\t}\n\n\t\t// defined due to `this` being reassigned in arrow functions\n\t\tconst instance = this;\n\n\t\tthis._actions = Object.create(null);\n\n\t\t// the listener to be called for actions\n\t\tconst actionEmitHandler = (event, arg) => {\n\t\t\tif (instance.actionExists(arg.action)) {\n\t\t\t\tconst target = Process.is('renderer') ? remote.getCurrentWindow().id : arg.target;\n\n\t\t\t\tconst act = instance.dispatchAction({ ...arg, target }, arg.action, arg.payload);\n\n\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t// on Promise complete, send a callback to the dispatcher\n\t\t\t\t\tact.then((data) => {\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// send a callback to the dispatcher\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t...arg,\n\t\t\t\t\t\ttarget\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if the action doesn't exist, send an error message back to the caller\n\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] unknown action called from ${arg.process} process, in ${Process.type()} process: ${arg.action}`);\n\t\t\t}\n\t\t}\n\n\t\t// run on `channel.call`\n\t\tconst emitterCallListener = (event, arg) => {\n\t\t\tif (typeof arg !== 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch(arg.callType) {\n\t\t\t\t// if the call type is an action, let `actionEmitHandler` handle it\n\t\t\t\tcase 'action':\n\t\t\t\t\tactionEmitHandler(event, arg);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// define the process emitter, minimizes code duplication\n\t\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\t\t// the emitter event handlers for calls and errors\n\t\temitter.on(channels.call, emitterCallListener);\n\t\temitter.on(channels.error, (event, err) => {\n\t\t\tif (typeof err === 'object') {\n\t\t\t\tif (err.type === 'throw') {\n\t\t\t\t\tthrow new Error(err.message);\n\t\t\t\t} else if (err.type === 'console' || err.type === 'error') {\n\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t} else if (err.type === 'warn') {\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t} else if (err.type === 'log') {\n\t\t\t\t\tconsole.log(err.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\n\t\tconst { dispatchAction, dispatchExternalAction } = this;\n\n\t\tthis.dispatch = (type, payload) => {\n\t\t\treturn dispatchAction.call(instance, {\n\t\t\t\tprocess: Process.type(),\n\t\t\t\ttarget: Process.is('renderer') ? remote.getCurrentWindow().id : null\n\t\t\t}, type, payload);\n\t\t}\n\n\t\tthis.dispatchExternal = (target, action, payload) => {\n\t\t\t// return a promise of the dispatch, resolving on callback\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tdispatchExternalAction.call(instance, target, action, payload);\n\n\t\t\t\t// only resolve if the action callback is the same as that called, then remove the callback handler\n\t\t\t\tconst listener = (event, arg) => {\n\t\t\t\t\tif (arg.action === action) {\n\t\t\t\t\t\temitter.removeListener(channels.callback, listener);\n\t\t\t\t\t\tresolve(arg.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// setup a callback listener\n\t\t\t\temitter.on(channels.callback, listener);\n\t\t\t});\n\t\t}\n\n\t\t// register all actions defined in the class constructor options\n\t\tObject.keys(actions).forEach((action) => {\n\t\t\tthis.registerAction(action, actions[action]);\n\t\t});\n\n\t\tthis.debug = {\n\t\t\tprocess: Process.type(),\n\t\t\tchannels\n\t\t}\n\n\t\tthis.handshake = Process.is('main') ? { done: 0, total: 0, completed: false, targets: [], timeout: this.config.handshake.timeout } : { completed: false }\n\n\t\tthis.beginHandshake();\n\t}\n\n\tbeginHandshake() {\n\t\tconst { handshake } = this;\n\n\t\tif (Process.is('main')) {\n\t\t\tconst handshakeListener = (event, arg) => {\n\t\t\t\thandshake.total += 1;\n\t\t\t\thandshake.targets.push(arg.target);\n\n\t\t\t\tevent.sender.send(channels.handshake_return, {\n\t\t\t\t\ttarget: arg.target\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tipcMain.on(channels.handshake, handshakeListener);\n\n\t\t\tconst mainHandshakeListener = (event, arg) => {\n\t\t\t\tif (handshake.targets.indexOf(arg.target) >= 0) {\n\t\t\t\t\thandshake.done += 1;\n\t\t\t\t\thandshake.completed = (handshake.done === handshake.total);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('[IpcFlux] handshake return from unknown BrowserWindow id');\n\t\t\t\t}\n\n\t\t\t\tif (handshake.completed) {\n\t\t\t\t\tipcMain.removeListener(channels.handshake_return, mainHandshakeListener);\n\t\t\t\t\tipcMain.removeListener(channels.handshake, handshakeListener);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tipcMain.on(channels.handshake_return, mainHandshakeListener);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (!handshake.completed) {\n\t\t\t\t\twebContents.getAllWebContents().forEach((win) => {\n\t\t\t\t\t\twin.send(channels.error, {\n\t\t\t\t\t\t\ttype: 'throw',\n\t\t\t\t\t\t\tmessage: `[IpcFlux] handshake did not completed within set timeout of ${handshake.timeout}ms (${handshake.timeout / 1000}s)`\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tthrow new Error(`[IpcFlux] handshake did not completed within set timeout of ${handshake.timeout}ms (${handshake.timeout / 1000}s)`);\n\t\t\t\t}\n\n\t\t\t\tipcMain.removeAllListeners(channels.handshake);\n\t\t\t\tipcMain.removeAllListeners(channels.handshake_return);\n\t\t\t}, handshake.timeout);\n\t\t} else if (Process.is('renderer')) {\n\t\t\tipcRenderer.send(channels.handshake, {\n\t\t\t\tprocess: Process.type(),\n\t\t\t\ttarget: remote.getCurrentWindow().id\n\t\t\t});\n\n\t\t\tconst rendererHandshakeListener = (event, arg) => {\n\t\t\t\tif (arg.target === remote.getCurrentWindow().id) {\n\t\t\t\t\tevent.sender.send(channels.handshake_return, {\n\t\t\t\t\t\ttarget: arg.target\n\t\t\t\t\t});\n\t\t\t\t\thandshake.completed = true;\n\t\t\t\t\tipcRenderer.removeListener(channels.handshake_return, rendererHandshakeListener);\n\n\t\t\t\t\tipcRenderer.removeAllListeners(channels.handshake);\n\t\t\t\t\tipcRenderer.removeAllListeners(channels.handshake_return);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tipcRenderer.on(channels.handshake_return, rendererHandshakeListener);\n\t\t}\n\t}\n\n\tactionExists(action) {\n\t\treturn !!this._actions[action];\n\t}\n\n\tdispatchAction(_caller, _action, _payload) {\n\t\tconst { action, payload } = {\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tconst entry = this._actions[action];\n\n\t\t// if no action was found\n\t\tif (!entry) {\n\t\t\t// action was dispatched from this process, show the error in this process\n\t\t\tif (_caller.process === Process.type()) {\n\t\t\t\tconsole.error(`[IpcFlux] unknown action: ${action}`);\n\t\t\t}\n\t\t\t// action existence is checked in `actionListener` above, as we don't know the actions defined in the other process\n\t\t\treturn;\n\t\t}\n\n\t\t// return a promise of the action function, async\n\t\treturn entry.length > 1 ? Promise.all(entry.map(handler => handler(payload))) : entry[0](payload);\n\t}\n\n\tdispatchExternalAction(_target, _action, _payload) {\n\t\t// same for both process types\n\t\tlet arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'action'\n\t\t};\n\n\t\tif (Process.is('main')) {\n\t\t\t// checks target is an instance of BrowserWindow, or if is a BrowserWindow id\n\t\t\tif (typeof _target === 'object' || typeof _target === 'number') {} else {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instanceof BrowserWindow or an active BrowserWindow\\'s id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// converts BrowserWindow or BrowserWindow id to webContents for instance checking\n\t\t\t_target = typeof _target === 'number' ? webContents.fromId(_target) : webContents in _target ? _target.webContents : {}\n\n\t\t\tif(!(_target instanceof webContents)) {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not an instanceof BrowserWindow or an active BrowserWindow\\'s id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof _action !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// add the payload to `arg` if not undefined\n\t\t\tif (typeof _payload !== 'undefined') {\n\t\t\t\targ.payload = _payload;\n\t\t\t}\n\t\t\twebContents.fromId(_target.webContents.id).send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction: _action,\n\t\t\t\t// send the target BrowserWindow id for callback and error handling\n\t\t\t\ttarget: _target.webContents.id\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\t// _target param is action, and _action param is payload because renderer process does not require target BrowserWindow to be passed\n\t\t\tconst { _action, _payload } = {\n\t\t\t\t_action: _target,\n\t\t\t\t_payload: _action\n\t\t\t};\n\n\t\t\tif (typeof _action !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// add the payload to `arg` if not undefined\n\t\t\tif (typeof _payload !== 'undefined') {\n\t\t\t\targ.payload = _payload;\n\t\t\t}\n\n\t\t\t// send a call to the main process to dispatch the action\n\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction: _action,\n\t\t\t\t// send the current BrowserWindow id for callback and error handling\n\t\t\t\ttarget: remote.getCurrentWindow().id\n\t\t\t});\n\t\t}\n\t}\n\n\tregisterAction(action, handler) {\n\t\tconst instance = this;\n\n\t\t// checks if action is in `_actions` array, if not, create an array at the required key\n\t\tconst entry = Array.isArray(instance._actions[action]) ? instance._actions[action] : instance._actions[action] = [];\n\n\t\t// add the action to the array\n\t\t// note that this allows actions to be created using the same action_name, but with different handlers without being overwritten\n\t\tentry.push((payload, cb) => {\n\t\t\t// add the handler to `_actions`, passing in { dispatch, dispatchExternal } for use within the action, as well as the payload and callback\n\t\t\tlet res = handler({\n\t\t\t\tdispatch: instance.dispatch,\n\t\t\t\tdispatchExternal: instance.dispatchExternal\n\t\t\t}, payload, cb);\n\n\t\t\t// if not already a Promise, make it one\n\t\t\tif (!isPromise(res)) {\n\t\t\t\tres = Promise.resolve(res);\n\t\t\t}\n\n\t\t\treturn res;\n\t\t});\n\t}\n}\n\nexport default IpcFlux"]}