{"version":3,"sources":["../src/index.js"],"names":["Process","assert","isPromise","channels","call","callback","error","state","removeExistingListeners","Object","values","forEach","emitter","removeAllListeners","channel","IpcFlux","options","env","type","Promise","id","actions","mutations","getters","config","undefined","keys","length","is","flux","_id","getCurrentWindow","_committing","_actions","create","_mutations","_getters","_subscribers","_config","maxListeners","debug","actionRouteHandler","event","arg","actionExists","action","target","act","dispatch","payload","then","sender","send","data","process","mutationRouteHandler","mutationExists","mutation","commit","routeCall","callType","setMaxListeners","on","errorCallHandler","err","Error","message","console","warn","log","dispatchExternal","commitExternal","resolve","reject","listener","removeListener","registerAction","registerMutation","registerGetter","getter","Boolean","_caller","_action","_payload","entry","all","map","handler","_target","fromId","webContents","_type","_options","_withCommit","sub","_mutation","Array","isArray","push","cb","res","raw","fn","committing"],"mappings":"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","file":"index.js","sourcesContent":["//\n//     _                  _____\n//    (_)__  ____  ____  / _/ /_ ____ __\n//   / / _ \\/ __/ /___/ / _/ / // /\\ \\ /\n//  /_/ .__/\\__/       /_//_/\\_,_//_\\_\\\n//   /_/\n//\n//\tipc-flux\n//\n//\tgithub - https://github.com/harryparkdotio/ipc-flux\n//\tnpm - https://www.npmjs.com/package/ipc-flux\n//\n//\t@harryparkdotio - harry@harrypark.io\n//\n//\tMIT license\n//\n\nimport { ipcMain, ipcRenderer, webContents, remote } from 'electron';\n\nimport utils from './utils';\n\nconst { Process, assert, isPromise } = utils;\n\n// predefined channels\nconst channels = {\n\tcall: 'IpcFlux-Call',\n\tcallback: 'IpcFlux-Callback',\n\terror: 'IpcFlux-Error',\n\tstate: 'IpcFlux-State'\n};\n\n// remove all existing IpcFlux listeners\nconst removeExistingListeners = () => {\n\tObject.values(channels).forEach(channel => {\n\t\tProcess.emitter().removeAllListeners(channel);\n\t});\n};\n\nclass IpcFlux {\n\tconstructor(options = {}) {\n\t\tif (Process.env.type() !== 'production') {\n\t\t\t// check if Promises can be used\n\t\t\tassert(typeof Promise === 'undefined', 'Promises are required');\n\t\t}\n\n\t\tremoveExistingListeners();\n\n\t\tconst { id, actions = {}, mutations = {}, getters = {}, config = {}, state } = options;\n\n\t\t// check if state is defined or is an object with something in it\n\t\tassert((state !== undefined || (typeof state === 'object' && Object.keys(state).length > 0)) && Process.is('renderer'), 'initial state must be declared in main process');\n\n\t\t// defined due to `this` being reassigned in arrow functions\n\t\tconst flux = this;\n\n\t\t// window reference id, if no custom id is specified, use the browserWindow id or 'main'\n\t\tthis._id = id || (Process.is('renderer') ? remote.getCurrentWindow().id : 'main');\n\n\t\t// define globs used throughout\n\t\tthis._committing = false;\n\t\tthis._actions = Object.create(null);\n\t\tthis._mutations = Object.create(null);\n\t\tthis._getters = Object.create(null);\n\t\tthis._subscribers = [];\n\n\t\t// state still needs to be defined within renderer instances, just not from initial config, hence the assert above\n\t\tthis.state = Process.is('main') ? state || {} : {};\n\n\t\tthis._config = {\n\t\t\tmaxListeners: 50,\n\t\t\tdebug: false,\n\t\t\t...config\n\t\t};\n\n\t\t// the listener to be called for actions\n\t\tconst actionRouteHandler = (event, arg) => {\n\t\t\tif (flux.actionExists(arg.action)) {\n\t\t\t\tconst target = Process.is('renderer') ? remote.getCurrentWindow().id : arg.target;\n\n\t\t\t\tconst act = dispatch.call(flux, { ...arg, target }, arg.action, arg.payload);\n\n\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t// on Promise complete, send a callback to the dispatcher\n\t\t\t\t\tact.then(data => {\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// send a callback to the dispatcher\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t...arg,\n\t\t\t\t\t\ttarget\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if the action doesn't exist, send an error message back to the caller\n\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] unknown action called from ${arg.process} process, in ${Process.type()} process: ${arg.action}`);\n\t\t\t}\n\t\t};\n\n\t\t// the listener to be called for mutations\n\t\tconst mutationRouteHandler = (event, arg) => {\n\t\t\tif (flux.mutationExists(arg.mutation)) {\n\t\t\t\tcommit.call(flux, arg.mutation, arg.payload);\n\t\t\t}\n\t\t};\n\n\t\t// because a single channel (`channel.call`) is used for all callers, route different calls to their required handler\n\t\tconst routeCall = (event, arg) => {\n\t\t\tif (typeof arg !== 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (arg.callType) {\n\t\t\t// if the call type is an action, let `actionEmitHandler` handle it\n\t\t\tcase 'action':\n\t\t\t\tactionRouteHandler(event, arg);\n\t\t\t\tbreak;\n\t\t\tcase 'mutation':\n\t\t\t\tmutationRouteHandler(event, arg);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t// define the process emitter, minimizes code duplication\n\t\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\t\temitter.setMaxListeners(this._config.maxListeners);\n\n\t\t// the emitter event handlers for calls and errors\n\t\temitter.on(channels.call, routeCall);\n\n\t\tconst errorCallHandler = (event, err) => {\n\t\t\tif (typeof err === 'object') {\n\t\t\t\tswitch (err.type) {\n\t\t\t\tcase 'throw':\n\t\t\t\t\tthrow new Error(err.message);\n\t\t\t\tcase 'warn':\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'warning':\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'log':\n\t\t\t\t\tconsole.log(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\n\t\temitter.on(channels.error, errorCallHandler);\n\n\t\tconst { dispatch, dispatchExternal, commit, commitExternal } = this;\n\n\t\tthis.dispatch = (type, payload) => {\n\t\t\treturn dispatch.call(flux, {\n\t\t\t\tprocess: Process.type(),\n\t\t\t\ttarget: Process.is('renderer') ? remote.getCurrentWindow().id : 0\n\t\t\t}, type, payload);\n\t\t};\n\n\t\tthis.dispatchExternal = (target, action, payload) => {\n\t\t\t// return a promise of the dispatch, resolving on callback\n\t\t\tdispatchExternal.call(flux, target, action, payload);\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t// only resolve if the action callback is the same as that called, then remove the callback handler\n\t\t\t\tconst listener = (event, arg) => {\n\t\t\t\t\tif (Process.is('renderer') ? arg.action === target : arg.action === action) {\n\t\t\t\t\t\temitter.removeListener(channels.callback, listener);\n\t\t\t\t\t\tresolve(arg.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// setup a callback listener\n\t\t\t\temitter.on(channels.callback, listener);\n\t\t\t});\n\t\t};\n\n\t\tthis.commit = (mutation, payload, options) => {\n\t\t\tcommit.call(flux, mutation, payload, options);\n\t\t};\n\n\t\tthis.commitExternal = (target, mutation, payload, options) => {\n\t\t\t// return a promise of the dispatch, resolving on callback\n\t\t\tcommitExternal.call(flux, target, mutation, payload, options);\n\t\t};\n\n\t\t// register all actions defined in the class constructor options\n\t\tObject.keys(actions).forEach(action => {\n\t\t\tthis.registerAction(action, actions[action]);\n\t\t});\n\n\t\t// register all mutations defined in the class constructor options\n\t\tObject.keys(mutations).forEach(mutation => {\n\t\t\tthis.registerMutation(mutation, mutations[mutation]);\n\t\t});\n\n\t\t// register all getters defined in the class constructor options\n\t\tObject.keys(getters).forEach(getter => {\n\t\t\tthis.registerGetter(getter, getters[getter]);\n\t\t});\n\n\t\tthis.debug = {\n\t\t\tprocess: Process.type(),\n\t\t\tchannels\n\t\t};\n\t}\n\n\tactionExists(action) {\n\t\treturn Boolean(this._actions[action]);\n\t}\n\n\tmutationExists(mutation) {\n\t\treturn Boolean(this._mutations[mutation]);\n\t}\n\n\tdispatch(_caller, _action, _payload) {\n\t\tconst { action, payload } = {\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tconst entry = this._actions[action];\n\n\t\t// if no action was found\n\t\tif (!entry) {\n\t\t\t// action was dispatched from this process, show the error in this process\n\t\t\tif (_caller.process === Process.type()) {\n\t\t\t\tconsole.error(`[IpcFlux] unknown action: ${action}`);\n\t\t\t}\n\t\t\t// action existence is checked in `actionListener` above, as we don't know the actions defined in the other process\n\t\t\treturn;\n\t\t}\n\n\t\t// return a promise of the action function\n\t\treturn entry.length > 1 ? Promise.all(entry.map(handler => handler(payload))) : entry[0](payload);\n\t}\n\n\tdispatchExternal(_target, _action, _payload) {\n\t\t// same for both process types\n\t\tconst arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'action'\n\t\t};\n\n\t\tlet { target, action, payload } = {\n\t\t\ttarget: _target,\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tif (Process.is('main')) {\n\t\t\t// checks target is an instance of BrowserWindow, or if is a BrowserWindow id\n\t\t\tif (typeof target !== 'object' && typeof target !== 'number') {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instance of BrowserWindow or active BrowserWindow id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// converts BrowserWindow or BrowserWindow id to webContents for flux checking\n\t\t\ttarget = typeof target === 'number' ? webContents.fromId(target) : target.webContents;\n\n\t\t\tif (!target.webContents) {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not an instance of BrowserWindow or active BrowserWindow id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof action !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twebContents.fromId(target.webContents.id).send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction,\n\t\t\t\tpayload,\n\t\t\t\t// send the target BrowserWindow id for callback and error handling\n\t\t\t\ttarget: target.webContents.id\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\tif (typeof target !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// send a call to the main process to dispatch the action\n\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction: target,\n\t\t\t\tpayload: action,\n\t\t\t\t// send the current BrowserWindow id for callback and error handling\n\t\t\t\ttarget: remote.getCurrentWindow().id\n\t\t\t});\n\t\t}\n\t}\n\n\tcommit(_type, _payload, _options) {\n\t\tconst flux = this;\n\n\t\tlet { type, payload, options } = {\n\t\t\ttype: _type,\n\t\t\tpayload: _payload,\n\t\t\toptions: _options\n\t\t};\n\n\t\tconst mutation = { type, payload };\n\t\tconst entry = this._mutations[type];\n\n\t\tif (!entry) {\n\t\t\tconsole.error(`[IpcFlux] unknown mutation type: ${type}`);\n\t\t\treturn;\n\t\t}\n\n\t\tflux._withCommit(() => {\n\t\t\tentry.forEach(handler => {\n\t\t\t\thandler(payload);\n\t\t\t});\n\t\t});\n\n\t\tthis._subscribers.forEach(sub => sub(mutation, this.state));\n\t}\n\n\tcommitExternal(_target, _mutation, _payload, _options) {\n\t\tconst flux = this;\n\n\t\tconst arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'mutation'\n\t\t};\n\n\t\tlet { target, mutation, payload, options } = {\n\t\t\ttarget: _target,\n\t\t\tmutation: _mutation,\n\t\t\tpayload: _payload,\n\t\t\toptions: _options\n\t\t};\n\n\t\tif (Process.is('main')) {\n\t\t\tif (typeof target !== 'object' && typeof target !== 'number') {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instance of BrowserWindow or active BrowserWindow id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttarget = typeof target === 'number' ? webContents.fromId(target) : target.webContents;\n\n\t\t\tif (!target.webContents) {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instance of BrowserWindow or active BrowserWindow id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof mutation !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] mutation not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twebContents.fromId(target.webContents.id).send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\tmutation,\n\t\t\t\tpayload,\n\t\t\t\toptions,\n\t\t\t\t// send the target BrowserWindow id for callback and error handling\n\t\t\t\ttarget: target.webContents.id\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\tif (typeof target !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] mutation not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// send a call to the main process to dispatch the action\n\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\tmutation: target,\n\t\t\t\tpayload: mutation,\n\t\t\t\toptions: payload,\n\t\t\t\t// send the current BrowserWindow id for callback and error handling\n\t\t\t\ttarget: remote.getCurrentWindow().id\n\t\t\t});\n\t\t}\n\t}\n\n\tregisterAction(action, handler) {\n\t\tconst flux = this;\n\n\t\t// checks if action is in `_actions` array, if not, create an array at the required key\n\t\tconst entry = Array.isArray(flux._actions[action]) ? flux._actions[action] : flux._actions[action] = [];\n\n\t\t// add the action to the array\n\t\t// note that this allows actions to be created using the same action_name, but with different handlers without being overwritten\n\t\tentry.push((payload, cb) => {\n\t\t\t// add the handler to `_actions`, passing in { dispatch, dispatchExternal } for use within the action, as well as the payload and callback\n\t\t\tlet res = handler({\n\t\t\t\tdispatch: flux.dispatch,\n\t\t\t\tdispatchExternal: flux.dispatchExternal,\n\t\t\t\tcommit: flux.commit,\n\t\t\t\tcommitExternal: flux.commitExternal,\n\t\t\t\tstate: flux.state\n\t\t\t}, payload, cb);\n\n\t\t\t// if not already a Promise, make it one\n\t\t\tif (!isPromise(res)) {\n\t\t\t\tres = Promise.resolve(res);\n\t\t\t}\n\n\t\t\treturn res;\n\t\t});\n\t}\n\n\tregisterMutation(mutation, handler) {\n\t\tconst flux = this;\n\n\t\tconst entry = Array.isArray(flux._mutations[mutation]) ? flux._mutations[mutation] : flux._mutations[mutation] = [];\n\t\tentry.push((payload) => {\n\t\t\thandler.call(flux, flux.state, payload);\n\t\t});\n\t}\n\n\tregisterGetter(getter, raw) {\n\t\tconst flux = this;\n\n\t\tif (this._getters[getter]) {\n\t\t\tconsole.log('[IpcFlux] duplicate getter key');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._getters[getter] = () => {\n\t\t\treturn raw(flux.state, flux.getters);\n\t\t};\n\t}\n\n\t_withCommit(fn) {\n\t\tconst committing = this._committing;\n\t\tthis._committing = true;\n\t\tfn();\n\t\tthis._committing = committing;\n\t}\n}\n\nexport default IpcFlux;"]}