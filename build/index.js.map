{"version":3,"sources":["../src/index.js"],"names":["Process","assert","isPromise","channels","call","callback","error","handshake","default","success","rmListeners","emitter","is","Object","values","forEach","channel","subchannel","removeAllListeners","IpcFlux","options","env","type","Promise","actions","config","instance","_actions","create","_config","timeout","actionEmitHandler","event","arg","actionExists","action","target","getCurrentWindow","id","act","dispatch","payload","then","data","sender","send","process","emitterCallListener","callType","on","err","Error","message","console","warn","log","dispatchExternal","resolve","listener","removeListener","keys","registerAction","debug","done","total","completed","callbacks_sent","targets","promise","initiated","callback_received","beginHandshake","handshakeListener","push","mainHandshakeListener","indexOf","reject","handshakeCheck","setInterval","clearInterval","setTimeout","catch","cause","length","getAllWebContents","win","rendererHandshakeListener","_caller","_action","_payload","entry","all","map","handler","_target","fromId","webContents","Array","isArray","cb","res"],"mappings":"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","file":"index.js","sourcesContent":["//     _                  _____\n//    (_)__  ____  ____  / _/ /_ ____ __\n//   / / _ \\/ __/ /___/ / _/ / // /\\ \\ /\n//  /_/ .__/\\__/       /_//_/\\_,_//_\\_\\\n//   /_/\n//\n//\tipc-flux\n//\n//\tgithub - https://github.com/harryparkdotio/ipc-flux\n//\tnpm - https://www.npmjs.com/package/ipc-flux\n//\n//\t@harryparkdotio - harry@harrypark.io\n//\n//\tMIT license\n//\n\nimport { ipcMain, ipcRenderer, webContents, BrowserWindow, remote } from 'electron';\n\nimport utils from './utils';\nconst { Process, assert, isPromise } = utils;\n\n// predefined channels\nconst channels = {\n\tcall: 'IpcFlux-Call',\n\tcallback: 'IpcFlux-Callback',\n\terror: 'IpcFlux-Error',\n\thandshake: {\n\t\tdefault: 'IpcFlux-Handshake',\n\t\tcallback: 'IpcFlux-Handshake-Callback',\n\t\tsuccess: 'IpcFlux-Handshake-Success'\n\t}\n};\n\n// remove all active IpcFlux listeners for the current process\nconst rmListeners = () => {\n\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\tObject.values(channels).forEach((channel) => {\n\t\ttypeof channel === 'object' ? Object.values(channel).forEach((subchannel) => {\n\t\t\temitter.removeAllListeners(subchannel);\n\t\t}) : emitter.removeAllListeners(channel);\n\t});\n}\n\nclass IpcFlux {\n\tconstructor(options = {}) {\n\t\tif (Process.env.type() !== 'production') {\n\t\t\t// check if Promises can be used\n\t\t\tassert(typeof Promise !== 'undefined', '[IpcFlux] requires Promises to function.');\n\t\t\tassert(this instanceof IpcFlux, '[IpcFlux] must be called with the new operator.');\n\t\t}\n\n\t\t// remove IpcFlux listeners\n\t\trmListeners();\n\n\t\tconst { actions={}, config={} } = options;\n\n\t\t// defined due to `this` being reassigned in arrow functions\n\t\tconst instance = this;\n\n\t\tthis._actions = Object.create(null);\n\t\tthis._config = Object.create(null);\n\n\t\tthis._config = {\n\t\t\thandshake: {\n\t\t\t\ttimeout: 10000\n\t\t\t},\n\t\t\t...config\n\t\t}\n\n\t\t// the listener to be called for actions\n\t\tconst actionEmitHandler = (event, arg) => {\n\t\t\tif (instance.actionExists(arg.action)) {\n\t\t\t\tconst target = Process.is('renderer') ? remote.getCurrentWindow().id : arg.target;\n\n\t\t\t\tconst act = dispatch.call(instance, { ...arg, target }, arg.action, arg.payload);\n\n\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t// on Promise complete, send a callback to the dispatcher\n\t\t\t\t\tact.then((data) => {\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// send a callback to the dispatcher\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t...arg,\n\t\t\t\t\t\ttarget\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if the action doesn't exist, send an error message back to the caller\n\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] unknown action called from ${arg.process} process, in ${Process.type()} process: ${arg.action}`);\n\t\t\t}\n\t\t}\n\n\t\t// run on `channel.call`\n\t\tconst emitterCallListener = (event, arg) => {\n\t\t\tif (typeof arg !== 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch(arg.callType) {\n\t\t\t\t// if the call type is an action, let `actionEmitHandler` handle it\n\t\t\t\tcase 'action':\n\t\t\t\t\tactionEmitHandler(event, arg);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// define the process emitter, minimizes code duplication\n\t\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\t\t// the emitter event handlers for calls and errors\n\t\temitter.on(channels.call, emitterCallListener);\n\t\temitter.on(channels.error, (event, err) => {\n\t\t\tif (typeof err === 'object') {\n\t\t\t\tif (err.type === 'throw') {\n\t\t\t\t\tthrow new Error(err.message);\n\t\t\t\t} else if (err.type === 'console' || err.type === 'error') {\n\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t} else if (err.type === 'warn') {\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t} else if (err.type === 'log') {\n\t\t\t\t\tconsole.log(err.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\n\t\tconst { dispatch, dispatchExternal } = this;\n\n\t\tthis.dispatch = (type, payload) => {\n\t\t\treturn dispatch.call(instance, {\n\t\t\t\tprocess: Process.type(),\n\t\t\t\ttarget: Process.is('renderer') ? remote.getCurrentWindow().id : 0\n\t\t\t}, type, payload);\n\t\t}\n\n\t\tthis.dispatchExternal = (target, action, payload) => {\n\t\t\t// return a promise of the dispatch, resolving on callback\n\t\t\tdispatchExternal.call(instance, target, action, payload);\n\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\t// only resolve if the action callback is the same as that called, then remove the callback handler\n\t\t\t\tconst listener = (event, arg) => {\n\t\t\t\t\tif (Process.is('renderer') ? arg.action === target : arg.action === action) {\n\t\t\t\t\t\temitter.removeListener(channels.callback, listener);\n\t\t\t\t\t\tresolve(arg.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// setup a callback listener\n\t\t\t\temitter.on(channels.callback, listener);\n\t\t\t});\n\t\t}\n\n\t\t// register all actions defined in the class constructor options\n\t\tObject.keys(actions).forEach((action) => {\n\t\t\tthis.registerAction(action, actions[action]);\n\t\t});\n\n\t\tthis.debug = {\n\t\t\tprocess: Process.type(),\n\t\t\tchannels\n\t\t}\n\n\t\t// define the handshake config, specific to the process type\n\t\tthis.handshake = Process.is('main') ? {\n\t\t\tdone: 0,\n\t\t\ttotal: 0,\n\t\t\tcompleted: false,\n\t\t\tcallbacks_sent: 0,\n\t\t\ttargets: [],\n\t\t\ttimeout: this._config.handshake.timeout,\n\t\t\tpromise: null\n\t\t} : {\n\t\t\tcompleted: false,\n\t\t\ttimeout: this._config.handshake.timeout,\n\t\t\tinitiated: false,\n\t\t\tcallback_received: false,\n\t\t\tpromise: null\n\t\t}\n\n\t\t// start the handshaking process\n\t\tthis.beginHandshake();\n\t}\n\n\tbeginHandshake() {\n\t\tconst { handshake } = this;\n\n\t\tif (Process.is('main')) {\n\t\t\tconst handshakeListener = (event, arg) => {\n\t\t\t\thandshake.total += 1;\n\t\t\t\t// add target to targets, used to determine which handshakes pass/fail\n\t\t\t\thandshake.targets.push(arg.target);\n\n\t\t\t\t// return handshake with target\n\t\t\t\tevent.sender.send(channels.handshake.callback, {\n\t\t\t\t\ttarget: arg.target\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// create a listener, each handshake is initiated from the renderer\n\t\t\tipcMain.on(channels.handshake.default, handshakeListener);\n\n\t\t\tconst mainHandshakeListener = (event, arg) => {\n\t\t\t\t// if the target has already been added (initial handshake successful)\n\t\t\t\tif (handshake.targets.indexOf(arg.target) >= 0) {\n\t\t\t\t\thandshake.done += 1;\n\t\t\t\t\thandshake.completed = (handshake.done === handshake.total);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('[IpcFlux] handshake return from unknown BrowserWindow id');\n\t\t\t\t}\n\n\t\t\t\tif (handshake.completed) {\n\t\t\t\t\t// remove this handshake listener\n\t\t\t\t\tipcMain.removeListener(channels.handshake.success, mainHandshakeListener);\n\t\t\t\t\tipcMain.removeListener(channels.handshake.default, handshakeListener);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tipcMain.on(channels.handshake.success, mainHandshakeListener);\n\n\t\t\thandshake.promise = new Promise((resolve, reject) => {\n\t\t\t\t// called to check if handshakes have been completed\n\t\t\t\tconst handshakeCheck = setInterval(() => {\n\t\t\t\t\thandshake.completed = (handshake.done === handshake.total);\n\n\t\t\t\t\tif (handshake.completed) {\n\t\t\t\t\t\tclearInterval(handshakeCheck);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}, 100 < handshake.timeout ? handshake.timeout / 10 : 100);\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tclearInterval(handshakeCheck);\n\t\t\t\t\treject();\n\t\t\t\t}, handshake.timeout);\n\t\t\t}).then(() => {\n\t\t\t\t// remove all main handshake listeners\n\t\t\t\tipcMain.removeAllListeners(channels.handshake.default);\n\t\t\t\tipcMain.removeAllListeners(channels.handshake.callback);\n\t\t\t\tipcMain.removeAllListeners(channels.handshake.success);\n\n\t\t\t\treturn true;\n\t\t\t}).catch(() => {\n\t\t\t\t// remove all main handshake listeners\n\t\t\t\tipcMain.removeAllListeners(channels.handshake.default);\n\t\t\t\tipcMain.removeAllListeners(channels.handshake.callback);\n\t\t\t\tipcMain.removeAllListeners(channels.handshake.success);\n\n\t\t\t\tlet cause;\n\t\t\t\tif (handshake.callbacks_sent < handshake.total || handshake.callbacks_sent < handshake.targets.length) {\n\t\t\t\t\tcause = 'not all callbacks were returned';\n\t\t\t\t} else if (handshake.done < handshake.total) {\n\t\t\t\t\tcause = 'not all initiated handshakes completed';\n\t\t\t\t} else {\n\t\t\t\t\tcause = 'unknown error';\n\t\t\t\t}\n\t\t\t\t// send error to all windows\n\t\t\t\twebContents.getAllWebContents().forEach((win) => {\n\t\t\t\t\twin.send(channels.error, {\n\t\t\t\t\t\ttype: 'throw',\n\t\t\t\t\t\tmessage: `[IpcFlux] handshake failed (timeout): ${err}`\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthrow new Error(`[IpcFlux] handshake failed (timeout): ${err}`);\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\t// initiate the handshake\n\t\t\tipcRenderer.send(channels.handshake.default, {\n\t\t\t\ttarget: remote.getCurrentWindow().id\n\t\t\t});\n\t\t\thandshake.initiated = true;\n\n\t\t\tconst rendererHandshakeListener = (event, arg) => {\n\t\t\t\tif (arg.target === remote.getCurrentWindow().id) {\n\t\t\t\t\thandshake.callback_received = true;\n\t\t\t\t\t// return the handshake, verifies in main process handshake is complete\n\t\t\t\t\tevent.sender.send(channels.handshake.success, {\n\t\t\t\t\t\ttarget: arg.target\n\t\t\t\t\t});\n\t\t\t\t\thandshake.completed = true;\n\t\t\t\t\t// remove this listener\n\t\t\t\t\tipcRenderer.removeListener(channels.handshake.callback, rendererHandshakeListener);\n\n\t\t\t\t\t// remove all renderer handshake listeners\n\t\t\t\t\tipcRenderer.removeAllListeners(channels.handshake.default);\n\t\t\t\t\tipcRenderer.removeAllListeners(channels.handshake.callback);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tipcRenderer.on(channels.handshake.callback, rendererHandshakeListener);\n\n\t\t\thandshake.promise = new Promise((resolve, reject) => {\n\t\t\t\tconst handshakeCheck = setInterval(() => {\n\t\t\t\t\tif (handshake.done) {\n\t\t\t\t\t\tclearInterval(handshakeCheck);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}, 100 < handshake.timeout ? handshake.timeout / 10 : 100);\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tclearInterval(handshakeCheck);\n\t\t\t\t\treject();\n\t\t\t\t}, handshake.timeout);\n\t\t\t}).then(() => {\n\t\t\t\t// remove all renderer handshake listeners\n\t\t\t\tipcRenderer.removeAllListeners(channels.handshake.default);\n\t\t\t\tipcRenderer.removeAllListeners(channels.handshake.callback);\n\t\t\t\tipcRenderer.removeAllListeners(channels.handshake.success);\n\t\t\t\treturn true;\n\t\t\t}).catch(() => {\n\t\t\t\t// remove all renderer handshake listeners\n\t\t\t\tipcRenderer.removeAllListeners(channels.handshake.default);\n\t\t\t\tipcRenderer.removeAllListeners(channels.handshake.callback);\n\t\t\t\tipcRenderer.removeAllListeners(channels.handshake.success);\n\n\t\t\t\tlet cause;\n\t\t\t\tif (handshake.initiated === false) {\n\t\t\t\t\tcause = 'handshake not initiated';\n\t\t\t\t} else if (handshake.callback_received === false) {\n\t\t\t\t\tcause = 'handshake callback not received';\n\t\t\t\t} else if (handshake.completed === false) {\n\t\t\t\t\tcause = 'handshake was not completed';\n\t\t\t\t} else {\n\t\t\t\t\tcause = 'unknown error';\n\t\t\t\t}\n\t\t\t\tthrow new Error(`[IpcFlux] handshake failed (timeout): ${cause}`);\n\t\t\t});\n\t\t}\n\t}\n\n\tactionExists(action) {\n\t\treturn !!this._actions[action];\n\t}\n\n\tdispatch(_caller, _action, _payload) {\n\t\tconst { action, payload } = {\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tconst entry = this._actions[action];\n\n\t\t// if no action was found\n\t\tif (!entry) {\n\t\t\t// action was dispatched from this process, show the error in this process\n\t\t\tif (_caller.process === Process.type()) {\n\t\t\t\tconsole.error(`[IpcFlux] unknown action: ${action}`);\n\t\t\t}\n\t\t\t// action existence is checked in `actionListener` above, as we don't know the actions defined in the other process\n\t\t\treturn;\n\t\t}\n\n\t\t// return a promise of the action function, async\n\t\treturn entry.length > 1 ? Promise.all(entry.map(handler => handler(payload))) : entry[0](payload);\n\t}\n\n\tdispatchExternal(_target, _action, _payload) {\n\t\t// same for both process types\n\t\tlet arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'action'\n\t\t};\n\n\t\tlet { target, action, payload } = {\n\t\t\ttarget: _target,\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t}\n\n\t\tif (Process.is('main')) {\n\t\t\t// checks target is an instance of BrowserWindow, or if is a BrowserWindow id\n\t\t\tif (typeof target === 'object' || typeof target === 'number') {} else {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instanceof BrowserWindow or an active BrowserWindow\\'s id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// converts BrowserWindow or BrowserWindow id to webContents for instance checking\n\t\t\ttarget = typeof target === 'number' ? webContents.fromId(target) : target.webContents;\n\n\t\t\tif(!target.webContents) {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not an instanceof BrowserWindow or an active BrowserWindow\\'s id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof action !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twebContents.fromId(target.webContents.id).send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction,\n\t\t\t\tpayload,\n\t\t\t\t// send the target BrowserWindow id for callback and error handling\n\t\t\t\ttarget: target.webContents.id\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\t// target param is action, and action param is payload because renderer process does not require target BrowserWindow to be passed\n\t\t\tif (typeof target !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// send a call to the main process to dispatch the action\n\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction: target,\n\t\t\t\tpayload: action,\n\t\t\t\t// send the current BrowserWindow id for callback and error handling\n\t\t\t\ttarget: remote.getCurrentWindow().id,\n\t\t\t});\n\t\t}\n\t}\n\n\tregisterAction(action, handler) {\n\t\tconst instance = this;\n\n\t\t// checks if action is in `_actions` array, if not, create an array at the required key\n\t\tconst entry = Array.isArray(instance._actions[action]) ? instance._actions[action] : instance._actions[action] = [];\n\n\t\t// add the action to the array\n\t\t// note that this allows actions to be created using the same action_name, but with different handlers without being overwritten\n\t\tentry.push((payload, cb) => {\n\t\t\t// add the handler to `_actions`, passing in { dispatch, dispatchExternal } for use within the action, as well as the payload and callback\n\t\t\tlet res = handler({\n\t\t\t\tdispatch: instance.dispatch,\n\t\t\t\tdispatchExternal: instance.dispatchExternal\n\t\t\t}, payload, cb);\n\n\t\t\t// if not already a Promise, make it one\n\t\t\tif (!isPromise(res)) {\n\t\t\t\tres = Promise.resolve(res);\n\t\t\t}\n\n\t\t\treturn res;\n\t\t});\n\t}\n}\n\nexport default IpcFlux"]}