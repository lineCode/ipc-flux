{"version":3,"sources":["../src/index.js"],"names":["Process","assert","isPromise","channels","call","callback","error","rmListeners","emitter","is","Object","values","forEach","channel","subchannel","removeAllListeners","IpcFlux","options","env","type","Promise","actions","config","instance","_actions","create","_config","maxListeners","debug","actionEmitHandler","event","arg","actionExists","action","target","getCurrentWindow","id","act","dispatch","payload","then","data","sender","send","process","emitterCallListener","callType","setMaxListeners","on","err","Error","message","console","warn","log","dispatchExternal","resolve","reject","listener","removeListener","keys","registerAction","_caller","_action","_payload","entry","length","all","map","handler","_target","fromId","webContents","Array","isArray","push","cb","res"],"mappings":"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","file":"index.js","sourcesContent":["//\n//     _                  _____\n//    (_)__  ____  ____  / _/ /_ ____ __\n//   / / _ \\/ __/ /___/ / _/ / // /\\ \\ /\n//  /_/ .__/\\__/       /_//_/\\_,_//_\\_\\\n//   /_/\n//\n//\tipc-flux\n//\n//\tgithub - https://github.com/harryparkdotio/ipc-flux\n//\tnpm - https://www.npmjs.com/package/ipc-flux\n//\n//\t@harryparkdotio - harry@harrypark.io\n//\n//\tMIT license\n//\n//\n\nimport { ipcMain, ipcRenderer, webContents, BrowserWindow, remote } from 'electron';\n\nimport utils from './utils';\nconst { Process, assert, isPromise } = utils;\n\n// predefined channels\nconst channels = {\n\tcall: 'IpcFlux-Call',\n\tcallback: 'IpcFlux-Callback',\n\terror: 'IpcFlux-Error'\n};\n\n\n// remove all active IpcFlux listeners for the current process\nconst rmListeners = () => {\n\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\tObject.values(channels).forEach((channel) => {\n\t\ttypeof channel === 'object' ? Object.values(channel).forEach((subchannel) => {\n\t\t\temitter.removeAllListeners(subchannel);\n\t\t}) : emitter.removeAllListeners(channel);\n\t});\n}\n\nclass IpcFlux {\n\tconstructor(options = {}) {\n\t\tif (Process.env.type() !== 'production') {\n\t\t\t// check if Promises can be used\n\t\t\tassert(typeof Promise !== 'undefined', '[IpcFlux] requires Promises to function.');\n\t\t\tassert(this instanceof IpcFlux, '[IpcFlux] must be called with the new operator.');\n\t\t}\n\n\t\t// remove IpcFlux listeners\n\t\trmListeners();\n\n\t\tconst { actions={}, config={} } = options;\n\n\t\t// defined due to `this` being reassigned in arrow functions\n\t\tconst instance = this;\n\n\t\tthis._actions = Object.create(null);\n\t\tthis._config = Object.create(null);\n\n\t\tthis._config = {\n\t\t\tmaxListeners: 50,\n\t\t\tdebug: false,\n\t\t\t...config\n\t\t}\n\n\t\t// the listener to be called for actions\n\t\tconst actionEmitHandler = (event, arg) => {\n\t\t\tif (instance.actionExists(arg.action)) {\n\t\t\t\tconst target = Process.is('renderer') ? remote.getCurrentWindow().id : arg.target;\n\n\t\t\t\tconst act = dispatch.call(instance, { ...arg, target }, arg.action, arg.payload);\n\n\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t// on Promise complete, send a callback to the dispatcher\n\t\t\t\t\tact.then((data) => {\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// send a callback to the dispatcher\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t...arg,\n\t\t\t\t\t\ttarget\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if the action doesn't exist, send an error message back to the caller\n\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] unknown action called from ${arg.process} process, in ${Process.type()} process: ${arg.action}`);\n\t\t\t}\n\t\t}\n\n\t\t// run on `channel.call`\n\t\tconst emitterCallListener = (event, arg) => {\n\t\t\tif (typeof arg !== 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch(arg.callType) {\n\t\t\t\t// if the call type is an action, let `actionEmitHandler` handle it\n\t\t\t\tcase 'action':\n\t\t\t\t\tactionEmitHandler(event, arg);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// define the process emitter, minimizes code duplication\n\t\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\t\temitter.setMaxListeners(this._config.maxListeners);\n\n\t\t// the emitter event handlers for calls and errors\n\t\temitter.on(channels.call, emitterCallListener);\n\t\temitter.on(channels.error, (event, err) => {\n\t\t\tif (typeof err === 'object') {\n\t\t\t\tswitch(err.type) {\n\t\t\t\t\tcase 'throw':\n\t\t\t\t\t\tthrow new Error(err.message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'warn':\n\t\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'warning':\n\t\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'log':\n\t\t\t\t\t\tconsole.log(err.message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\n\t\tconst { dispatch, dispatchExternal } = this;\n\n\t\tthis.dispatch = (type, payload) => {\n\t\t\treturn dispatch.call(instance, {\n\t\t\t\tprocess: Process.type(),\n\t\t\t\ttarget: Process.is('renderer') ? remote.getCurrentWindow().id : 0\n\t\t\t}, type, payload);\n\t\t}\n\n\t\tthis.dispatchExternal = (target, action, payload) => {\n\t\t\t// return a promise of the dispatch, resolving on callback\n\t\t\tdispatchExternal.call(instance, target, action, payload);\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t// only resolve if the action callback is the same as that called, then remove the callback handler\n\t\t\t\tconst listener = (event, arg) => {\n\t\t\t\t\tif (Process.is('renderer') ? arg.action === target : arg.action === action) {\n\t\t\t\t\t\temitter.removeListener(channels.callback, listener);\n\t\t\t\t\t\tresolve(arg.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject();\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// setup a callback listener\n\t\t\t\temitter.on(channels.callback, listener);\n\t\t\t});\n\t\t}\n\n\t\t// register all actions defined in the class constructor options\n\t\tObject.keys(actions).forEach((action) => {\n\t\t\tthis.registerAction(action, actions[action]);\n\t\t});\n\n\t\tthis.debug = {\n\t\t\tprocess: Process.type(),\n\t\t\tchannels\n\t\t}\n\t}\n\n\tactionExists(action) {\n\t\treturn !!this._actions[action];\n\t}\n\n\tdispatch(_caller, _action, _payload) {\n\t\tconst { action, payload } = {\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tconst entry = this._actions[action];\n\n\t\t// if no action was found\n\t\tif (!entry) {\n\t\t\t// action was dispatched from this process, show the error in this process\n\t\t\tif (_caller.process === Process.type()) {\n\t\t\t\tconsole.error(`[IpcFlux] unknown action: ${action}`);\n\t\t\t}\n\t\t\t// action existence is checked in `actionListener` above, as we don't know the actions defined in the other process\n\t\t\treturn;\n\t\t}\n\n\t\t// return a promise of the action function, async\n\t\treturn entry.length > 1 ? Promise.all(entry.map(handler => handler(payload))) : entry[0](payload);\n\t}\n\n\tdispatchExternal(_target, _action, _payload) {\n\t\t// same for both process types\n\t\tlet arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'action'\n\t\t};\n\n\t\tlet { target, action, payload } = {\n\t\t\ttarget: _target,\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t}\n\n\t\tif (Process.is('main')) {\n\t\t\t// checks target is an instance of BrowserWindow, or if is a BrowserWindow id\n\t\t\tif (typeof target === 'object' || typeof target === 'number') {} else {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instanceof BrowserWindow or an active BrowserWindow\\'s id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// converts BrowserWindow or BrowserWindow id to webContents for instance checking\n\t\t\ttarget = typeof target === 'number' ? webContents.fromId(target) : target.webContents;\n\n\t\t\tif(!target.webContents) {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not an instanceof BrowserWindow or an active BrowserWindow\\'s id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof action !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twebContents.fromId(target.webContents.id).send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction,\n\t\t\t\tpayload,\n\t\t\t\t// send the target BrowserWindow id for callback and error handling\n\t\t\t\ttarget: target.webContents.id\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\tif (typeof target !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// send a call to the main process to dispatch the action\n\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction: target,\n\t\t\t\tpayload: action,\n\t\t\t\t// send the current BrowserWindow id for callback and error handling\n\t\t\t\ttarget: remote.getCurrentWindow().id,\n\t\t\t});\n\t\t}\n\t}\n\n\tregisterAction(action, handler) {\n\t\tconst instance = this;\n\n\t\t// checks if action is in `_actions` array, if not, create an array at the required key\n\t\tconst entry = Array.isArray(instance._actions[action]) ? instance._actions[action] : instance._actions[action] = [];\n\n\t\t// add the action to the array\n\t\t// note that this allows actions to be created using the same action_name, but with different handlers without being overwritten\n\t\tentry.push((payload, cb) => {\n\t\t\t// add the handler to `_actions`, passing in { dispatch, dispatchExternal } for use within the action, as well as the payload and callback\n\t\t\tlet res = handler({\n\t\t\t\tdispatch: instance.dispatch,\n\t\t\t\tdispatchExternal: instance.dispatchExternal\n\t\t\t}, payload, cb);\n\n\t\t\t// if not already a Promise, make it one\n\t\t\tif (!isPromise(res)) {\n\t\t\t\tres = Promise.resolve(res);\n\t\t\t}\n\n\t\t\treturn res;\n\t\t});\n\t}\n}\n\nexport default IpcFlux"]}