{"version":3,"sources":["../src/index.js"],"names":["Process","assert","isPromise","channels","call","callback","error","state","rmListeners","emitter","is","Object","values","forEach","removeAllListeners","channel","IpcFlux","options","env","type","Promise","actions","mutations","config","undefined","keys","length","instance","_committing","_actions","create","_mutations","_getters","_subscribers","_config","maxListeners","debug","actionEmitHandler","event","arg","actionExists","action","target","getCurrentWindow","id","act","dispatch","payload","then","sender","send","data","process","commitEmitHandler","mutationExists","mutation","commit","emitterCallListener","callType","setMaxListeners","on","err","Error","message","console","warn","log","dispatchExternal","resolve","reject","listener","removeListener","registerAction","registerMutation","Boolean","_caller","_action","_payload","entry","all","map","handler","_target","fromId","webContents","_type","_options","_withCommit","sub","Array","isArray","push","cb","res","fn","committing"],"mappings":"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","file":"index.js","sourcesContent":["//\n//     _                  _____\n//    (_)__  ____  ____  / _/ /_ ____ __\n//   / / _ \\/ __/ /___/ / _/ / // /\\ \\ /\n//  /_/ .__/\\__/       /_//_/\\_,_//_\\_\\\n//   /_/\n//\n//\tipc-flux\n//\n//\tgithub - https://github.com/harryparkdotio/ipc-flux\n//\tnpm - https://www.npmjs.com/package/ipc-flux\n//\n//\t@harryparkdotio - harry@harrypark.io\n//\n//\tMIT license\n//\n//\n\nimport { ipcMain, ipcRenderer, webContents, remote } from 'electron';\n\nimport utils from './utils';\n\nconst { Process, assert, isPromise } = utils;\n\n// predefined channels\nconst channels = {\n\tcall: 'IpcFlux-Call',\n\tcallback: 'IpcFlux-Callback',\n\terror: 'IpcFlux-Error',\n\tstate: 'IpcFlux-State'\n};\n\n// remove all existing IpcFlux listeners\nconst rmListeners = () => {\n\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\tObject.values(channels).forEach(channel => {\n\t\temitter.removeAllListeners(channel);\n\t});\n};\n\nclass IpcFlux {\n\tconstructor(options = {}) {\n\t\tif (Process.env.type() !== 'production') {\n\t\t\t// check if Promises can be used\n\t\t\tassert(typeof Promise === 'undefined', 'Promises are required');\n\t\t}\n\n\t\t// remove IpcFlux listeners\n\t\trmListeners();\n\n\t\tconst { actions = {}, mutations = {}, config = {} } = options;\n\n\t\tlet { state } = options;\n\n\t\tassert((state !== undefined || (typeof state === 'object' && Object.keys(state).length > 0)) && Process.is('renderer'), 'initial state must be declared in main process');\n\n\t\tif (Process.is('main')) {\n\t\t\tstate = state || {};\n\t\t}\n\n\t\t// defined due to `this` being reassigned in arrow functions (grr)\n\t\tconst instance = this;\n\n\t\tthis._committing = false;\n\t\tthis._actions = Object.create(null);\n\t\tthis._mutations = Object.create(null);\n\t\tthis._getters = Object.create(null);\n\t\tthis._subscribers = [];\n\n\t\tthis._config = Object.create(null);\n\n\t\tthis._config = {\n\t\t\tmaxListeners: 50,\n\t\t\tdebug: false,\n\t\t\t...config\n\t\t};\n\n\t\t// the listener to be called for actions\n\t\tconst actionEmitHandler = (event, arg) => {\n\t\t\tif (instance.actionExists(arg.action)) {\n\t\t\t\tconst target = Process.is('renderer') ? remote.getCurrentWindow().id : arg.target;\n\n\t\t\t\tconst act = dispatch.call(instance, { ...arg, target }, arg.action, arg.payload);\n\n\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t// on Promise complete, send a callback to the dispatcher\n\t\t\t\t\tact.then(data => {\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// send a callback to the dispatcher\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t...arg,\n\t\t\t\t\t\ttarget\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if the action doesn't exist, send an error message back to the caller\n\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] unknown action called from ${arg.process} process, in ${Process.type()} process: ${arg.action}`);\n\t\t\t}\n\t\t};\n\n\t\tconst commitEmitHandler = (event, arg) => {\n\t\t\tif (instance.mutationExists(arg.mutation)) {\n\t\t\t\tconst target = Process.is('renderer') ? remote.getCurrentWindow().id : arg.target;\n\n\t\t\t\tconst act = commit.call(instance, { ...arg, target }, arg.mutation, arg.payload);\n\n\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\tact.then(data => {\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// run on `channel.call`\n\t\tconst emitterCallListener = (event, arg) => {\n\t\t\tif (typeof arg !== 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (arg.callType) {\n\t\t\t// if the call type is an action, let `actionEmitHandler` handle it\n\t\t\tcase 'action':\n\t\t\t\tactionEmitHandler(event, arg);\n\t\t\t\tbreak;\n\t\t\tcase 'mutation':\n\t\t\t\tcommitEmitHandler(event, arg);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t// define the process emitter, minimizes code duplication\n\t\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\t\temitter.setMaxListeners(this._config.maxListeners);\n\n\t\t// the emitter event handlers for calls and errors\n\t\temitter.on(channels.call, emitterCallListener);\n\n\t\temitter.on(channels.error, (event, err) => {\n\t\t\tif (typeof err === 'object') {\n\t\t\t\tswitch (err.type) {\n\t\t\t\tcase 'throw':\n\t\t\t\t\tthrow new Error(err.message);\n\t\t\t\tcase 'warn':\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'warning':\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'log':\n\t\t\t\t\tconsole.log(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\n\t\tconst { dispatch, dispatchExternal, commit } = this;\n\n\t\tthis.dispatch = (type, payload) => {\n\t\t\treturn dispatch.call(instance, {\n\t\t\t\tprocess: Process.type(),\n\t\t\t\ttarget: Process.is('renderer') ? remote.getCurrentWindow().id : 0\n\t\t\t}, type, payload);\n\t\t};\n\n\t\tthis.dispatchExternal = (target, action, payload) => {\n\t\t\t// return a promise of the dispatch, resolving on callback\n\t\t\tdispatchExternal.call(instance, target, action, payload);\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t// only resolve if the action callback is the same as that called, then remove the callback handler\n\t\t\t\tconst listener = (event, arg) => {\n\t\t\t\t\tif (Process.is('renderer') ? arg.action === target : arg.action === action) {\n\t\t\t\t\t\temitter.removeListener(channels.callback, listener);\n\t\t\t\t\t\tresolve(arg.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// setup a callback listener\n\t\t\t\temitter.on(channels.callback, listener);\n\t\t\t});\n\t\t};\n\n\t\tthis.commit = (type, payload, options) => {\n\t\t\treturn commit.call(instance, type, payload, options);\n\t\t};\n\n\t\t// register all actions defined in the class constructor options\n\t\tObject.keys(actions).forEach(action => {\n\t\t\tthis.registerAction(action, actions[action]);\n\t\t});\n\n\t\t// register all mutations defined in the class constructor options\n\t\tObject.keys(mutations).forEach(mutation => {\n\t\t\tthis.registerMutation(mutation, mutations[mutation]);\n\t\t});\n\n\t\tthis.debug = {\n\t\t\tprocess: Process.type(),\n\t\t\tchannels\n\t\t};\n\t}\n\n\tactionExists(action) {\n\t\treturn Boolean(this._actions[action]);\n\t}\n\n\tmutationExists(mutation) {\n\t\treturn Boolean(this._mutations[mutation]);\n\t}\n\n\tdispatch(_caller, _action, _payload) {\n\t\tconst { action, payload } = {\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tconst entry = this._actions[action];\n\n\t\t// if no action was found\n\t\tif (!entry) {\n\t\t\t// action was dispatched from this process, show the error in this process\n\t\t\tif (_caller.process === Process.type()) {\n\t\t\t\tconsole.error(`[IpcFlux] unknown action: ${action}`);\n\t\t\t}\n\t\t\t// action existence is checked in `actionListener` above, as we don't know the actions defined in the other process\n\t\t\treturn;\n\t\t}\n\n\t\t// return a promise of the action function\n\t\treturn entry.length > 1 ? Promise.all(entry.map(handler => handler(payload))) : entry[0](payload);\n\t}\n\n\tdispatchExternal(_target, _action, _payload) {\n\t\t// same for both process types\n\t\tconst arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'action'\n\t\t};\n\n\t\tlet { target, action, payload } = {\n\t\t\ttarget: _target,\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tif (Process.is('main')) {\n\t\t\t// checks target is an instance of BrowserWindow, or if is a BrowserWindow id\n\t\t\tif (typeof target !== 'object' && typeof target !== 'number') {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instanceof BrowserWindow or an active BrowserWindow\\'s id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// converts BrowserWindow or BrowserWindow id to webContents for instance checking\n\t\t\ttarget = typeof target === 'number' ? webContents.fromId(target) : target.webContents;\n\n\t\t\tif (!target.webContents) {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not an instanceof BrowserWindow or an active BrowserWindow\\'s id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof action !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twebContents.fromId(target.webContents.id).send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction,\n\t\t\t\tpayload,\n\t\t\t\t// send the target BrowserWindow id for callback and error handling\n\t\t\t\ttarget: target.webContents.id\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\tif (typeof target !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// send a call to the main process to dispatch the action\n\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction: target,\n\t\t\t\tpayload: action,\n\t\t\t\t// send the current BrowserWindow id for callback and error handling\n\t\t\t\ttarget: remote.getCurrentWindow().id\n\t\t\t});\n\t\t}\n\t}\n\n\tcommit(_type, _payload, _options) {\n\t\tconst instance = this;\n\n\t\tlet { type, payload, options } = {\n\t\t\ttype: _type,\n\t\t\tpayload: _payload,\n\t\t\toptions: _options\n\t\t};\n\n\t\tconst mutation = { type, payload };\n\t\tconst entry = this._mutations[type];\n\n\t\tif (!entry) {\n\t\t\tconsole.error(`[IpcFlux] unknown mutation type: ${type}`);\n\t\t\treturn;\n\t\t}\n\n\t\tinstance._withCommit(() => {\n\t\t\tentry.forEach(handler => {\n\t\t\t\thandler(payload);\n\t\t\t});\n\t\t});\n\n\t\tthis._subscribers.forEach(sub => sub(mutation, this.state));\n\t}\n\n\tcommitExternal(_target, _type, _payload, _options) {\n\t\tconst instance = this;\n\n\t\tconst arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'commit'\n\t\t};\n\n\t\tlet { target, type, payload, options } = {\n\t\t\ttarget: _target,\n\t\t\ttype: _type,\n\t\t\tpayload: _payload,\n\t\t\toptions: _options\n\t\t};\n\n\t\t// if (Process.is('main')) {\n\n\t\t// } else if (Process.is('renderer')) {\n\n\t\t// }\n\t}\n\n\tregisterAction(action, handler) {\n\t\tconst instance = this;\n\n\t\t// checks if action is in `_actions` array, if not, create an array at the required key\n\t\tconst entry = Array.isArray(instance._actions[action]) ? instance._actions[action] : instance._actions[action] = [];\n\n\t\t// add the action to the array\n\t\t// note that this allows actions to be created using the same action_name, but with different handlers without being overwritten\n\t\tentry.push((payload, cb) => {\n\t\t\t// add the handler to `_actions`, passing in { dispatch, dispatchExternal } for use within the action, as well as the payload and callback\n\t\t\tlet res = handler({\n\t\t\t\tdispatch: instance.dispatch,\n\t\t\t\tdispatchExternal: instance.dispatchExternal\n\t\t\t}, payload, cb);\n\n\t\t\t// if not already a Promise, make it one\n\t\t\tif (!isPromise(res)) {\n\t\t\t\tres = Promise.resolve(res);\n\t\t\t}\n\n\t\t\treturn res;\n\t\t});\n\t}\n\n\tregisterMutation(mutation, handler) {\n\t\tconst instance = this;\n\n\t\tconst entry = instance._mutations[mutation] || (instance._mutations[mutation] = []);\n\t\tentry.push((payload) => {\n\t\t\thandler.call(instance, instance.state, payload);\n\t\t});\n\t}\n\n\t_withCommit(fn) {\n\t\tconst committing = this._committing;\n\t\tthis._committing = true;\n\t\tfn();\n\t\tthis._committing = committing;\n\t}\n}\n\nexport default IpcFlux;"]}