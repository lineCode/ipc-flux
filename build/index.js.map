{"version":3,"sources":["../src/index.js"],"names":["Process","assert","isPromise","channels","call","callback","error","state","processes","removeExistingListeners","Object","values","forEach","emitter","removeAllListeners","channel","IpcFlux","options","env","type","Promise","id","actions","mutations","getters","config","undefined","keys","length","is","flux","_id","getCurrentWindow","_committing","_actions","create","_mutations","_getters","_subscribers","_instances","_config","maxListeners","debug","actionRouteHandler","event","arg","target","actionExists","action","act","dispatch","payload","then","sender","send","data","process","mutationRouteHandler","mutationExists","mutation","commit","routeCall","callType","setMaxListeners","on","uid","errorCallHandler","err","Error","message","console","warn","log","dispatchExternal","commitExternal","resolve","reject","listener","removeListener","registerAction","registerMutation","registerGetter","getter","Boolean","_target","_action","_payload","entry","all","map","handler","caller","fromId","_type","_options","_withCommit","sub","_mutation","webContents","Array","isArray","push","cb","res","raw","fn","committing"],"mappings":"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","file":"index.js","sourcesContent":["//\n//     _                  _____\n//    (_)__  ____  ____  / _/ /_ ____ __\n//   / / _ \\/ __/ /___/ / _/ / // /\\ \\ /\n//  /_/ .__/\\__/       /_//_/\\_,_//_\\_\\\n//   /_/\n//\n//\tipc-flux\n//\n//\tgithub - https://github.com/harryparkdotio/ipc-flux\n//\tnpm - https://www.npmjs.com/package/ipc-flux\n//\n//\t@harryparkdotio - harry@harrypark.io\n//\n//\tMIT license\n//\n\nimport { ipcMain, ipcRenderer, webContents, remote } from 'electron';\n\nimport utils from './utils';\n\nconst { Process, assert, isPromise } = utils;\n\n// predefined channels\nconst channels = {\n\tcall: 'IpcFlux-Call',\n\tcallback: 'IpcFlux-Callback',\n\terror: 'IpcFlux-Error',\n\tstate: 'IpcFlux-State',\n\tprocesses: 'IpcFlux-Processes'\n};\n\n// remove all existing IpcFlux listeners\nconst removeExistingListeners = () => {\n\tObject.values(channels).forEach(channel => {\n\t\tProcess.emitter().removeAllListeners(channel);\n\t});\n};\n\nclass IpcFlux {\n\tconstructor(options = {}) {\n\t\tif (Process.env.type() !== 'production') {\n\t\t\t// check if Promises can be used\n\t\t\tassert(typeof Promise === 'undefined', 'Promises are required');\n\t\t}\n\n\t\tremoveExistingListeners();\n\n\t\tconst { id, actions = {}, mutations = {}, getters = {}, config = {}, state } = options;\n\n\t\t// check if state is defined or is an object with something in it\n\t\tassert((state !== undefined || (typeof state === 'object' && Object.keys(state).length > 0)) && Process.is('renderer'), 'initial state must be declared in main process');\n\n\t\t// defined due to `this` being reassigned in arrow functions\n\t\tconst flux = this;\n\n\t\t// window reference id, if no custom id is specified, use the browserWindow id or 'main'\n\t\tthis._id = Process.is('renderer') ? id || remote.getCurrentWindow().id : 'main';\n\n\t\t// define globs used throughout\n\t\tthis._committing = false;\n\t\tthis._actions = Object.create(null);\n\t\tthis._mutations = Object.create(null);\n\t\tthis._getters = Object.create(null);\n\t\tthis._subscribers = [];\n\n\t\tthis._instances = {};\n\n\t\t// state still needs to be defined within renderer instances, just not from initial config, hence the assert above\n\t\tthis.state = Process.is('main') ? state || {} : {};\n\n\t\tthis._config = {\n\t\t\tmaxListeners: 50,\n\t\t\tdebug: false,\n\t\t\t...config\n\t\t};\n\n\t\t// the listener to be called for actions\n\t\tconst actionRouteHandler = (event, arg) => {\n\t\t\tif (arg.target === 'main') {\n\t\t\t\tif (flux.actionExists(arg.action)) {\n\t\t\t\t\tconst act = dispatch.call(flux, arg.target, arg.action, arg.payload);\n\n\t\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t\tact.then(data => {\n\t\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\ttarget\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (Process.is('main')) {\n\t\t\t\t\tlet target = arg.target;\n\n\t\t\t\t\tif (typeof arg.target === 'string') {\n\t\t\t\t\t\ttarget = flux._instances[target];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst act = flux.dispatch(target, arg.action, arg.payload);\n\n\t\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t\tact.then(data => {\n\n\t\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else if (Process.is('renderer')) {\n\t\t\t\t\tif (flux.actionExists(arg.action)) {\n\t\t\t\t\t\tconst act = dispatch.call(flux, 'local', arg.action, arg.payload);\n\n\t\t\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t\t\tact.then(data => {\n\t\t\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\t\ttarget\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// the listener to be called for mutations\n\t\tconst mutationRouteHandler = (event, arg) => {\n\t\t\tif (flux.mutationExists(arg.mutation)) {\n\t\t\t\tcommit.call(flux, arg.mutation, arg.payload);\n\t\t\t}\n\t\t};\n\n\t\t// because a single channel (`channel.call`) is used for all callers, route different calls to their required handler\n\t\tconst routeCall = (event, arg) => {\n\t\t\tif (typeof arg !== 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (arg.callType) {\n\t\t\t// if the call type is an action, let `actionEmitHandler` handle it\n\t\t\tcase 'action':\n\t\t\t\tactionRouteHandler(event, arg);\n\t\t\t\tbreak;\n\t\t\tcase 'mutation':\n\t\t\t\tmutationRouteHandler(event, arg);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t// define the process emitter, minimizes code duplication\n\t\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\t\temitter.setMaxListeners(this._config.maxListeners);\n\n\t\tif (Process.is('main')) {\n\t\t\temitter.on(channels.processes, (event, arg) => {\n\t\t\t\tif (arg.uid === 'main' || arg.uid === 'local') {\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] instance id cannot be 'main' or 'local' (BrowserWindow: ${arg.id})`);\n\t\t\t\t} else if (flux._instances[arg.uid]) {\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] instance id '${arg.uid}' already defined (BrowserWindow: ${arg.id})`);\n\t\t\t\t} else {\n\t\t\t\t\tflux._instances[arg.uid] = arg.id;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (Process.is('renderer')) {\n\t\t\temitter.send(channels.processes, {\n\t\t\t\tuid: flux._id,\n\t\t\t\tid: remote.getCurrentWindow().id\n\t\t\t});\n\t\t}\n\n\t\t// the emitter event handlers for calls and errors\n\t\temitter.on(channels.call, routeCall);\n\n\t\tconst errorCallHandler = (event, err) => {\n\t\t\tif (typeof err === 'object') {\n\t\t\t\tswitch (err.type) {\n\t\t\t\tcase 'throw':\n\t\t\t\t\tthrow new Error(err.message);\n\t\t\t\tcase 'warn':\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'warning':\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'log':\n\t\t\t\t\tconsole.log(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\n\t\temitter.on(channels.error, errorCallHandler);\n\n\t\tconst { dispatch, dispatchExternal, commit, commitExternal } = this;\n\n\t\tthis.dispatch = (target, type, payload) => {\n\t\t\tif (target === 'local' || (!Process.is('main') && target === remote.getCurrentWindow().id)) {\n\t\t\t\treturn dispatch.call(flux, target, type, payload);\n\t\t\t} else {\n\t\t\t\tdispatch.call(flux, target, type, payload);\n\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t// only resolve if the action callback is the same as that called, then remove the callback handler\n\t\t\t\t\tconst listener = (event, arg) => {\n\t\t\t\t\t\tif (arg.target === target) {\n\t\t\t\t\t\t\temitter.removeListener(channels.callback, listener);\n\t\t\t\t\t\t\tresolve(arg.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// setup a callback listener\n\t\t\t\t\temitter.on(channels.callback, listener);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tthis.commit = (mutation, payload, options) => {\n\t\t\tcommit.call(flux, mutation, payload, options);\n\t\t};\n\n\t\tthis.commitExternal = (target, mutation, payload, options) => {\n\t\t\t// return a promise of the dispatch, resolving on callback\n\t\t\tcommitExternal.call(flux, target, mutation, payload, options);\n\t\t};\n\n\t\t// register all actions defined in the class constructor options\n\t\tObject.keys(actions).forEach(action => {\n\t\t\tthis.registerAction(action, actions[action]);\n\t\t});\n\n\t\t// register all mutations defined in the class constructor options\n\t\tObject.keys(mutations).forEach(mutation => {\n\t\t\tthis.registerMutation(mutation, mutations[mutation]);\n\t\t});\n\n\t\t// register all getters defined in the class constructor options\n\t\tObject.keys(getters).forEach(getter => {\n\t\t\tthis.registerGetter(getter, getters[getter]);\n\t\t});\n\n\t\tthis.debug = {\n\t\t\tprocess: Process.type(),\n\t\t\tchannels\n\t\t};\n\t}\n\n\tactionExists(action) {\n\t\treturn Boolean(this._actions[action]);\n\t}\n\n\tmutationExists(mutation) {\n\t\treturn Boolean(this._mutations[mutation]);\n\t}\n\n\tdispatch(_target, _action, _payload) {\n\t\tconst flux = this;\n\n\t\tconst { target, action, payload } = {\n\t\t\ttarget: _target,\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tif (target === 'local' || (Process.is('main') && target === 'main') || (!Process.is('main') && target === remote.getCurrentWindow().id)) {\n\t\t\tconst entry = this._actions[action];\n\n\t\t\tif (!entry) {\n\t\t\t\tconsole.error(`[IpcFlux] unknown action: ${action}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn entry.length > 1 ? Promise.all(entry.map(handler => handler(payload))) : entry[0](payload);\n\t\t} else {\n\t\t\tconst arg = {\n\t\t\t\tprocess: Process.type(),\n\t\t\t\tcaller: Process.is('renderer') ? remote.getCurrentWindow().id : 'main',\n\t\t\t\tcallType: 'action'\n\t\t\t};\n\n\t\t\tlet _id = null;\n\n\t\t\tif (typeof target === 'number') {\n\t\t\t\t_id = typeof target === 'number' ? target || null : null;\n\n\t\t\t\tif (_id === null) {\n\t\t\t\t\tconsole.error(`[IpcFlux] target window id not valid: ${target}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else if (typeof target === 'string') {\n\t\t\t\t_id = target;\n\t\t\t}\n\n\t\t\tif (_id === null) {\n\t\t\t\tconsole.error('[IpcFlux] target passed as parameter was not BrowserWindow id or a valid ipc-flux reference id');\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tconst emitter = Process.is('main') ? webContents.fromId(_id) : ipcRenderer;\n\n\t\t\temitter.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction,\n\t\t\t\tpayload,\n\t\t\t\ttarget: _id\n\t\t\t});\n\t\t}\n\t}\n\n\tcommit(_type, _payload, _options) {\n\t\tconst flux = this;\n\n\t\tlet { type, payload, options } = {\n\t\t\ttype: _type,\n\t\t\tpayload: _payload,\n\t\t\toptions: _options\n\t\t};\n\n\t\tconst mutation = { type, payload };\n\t\tconst entry = this._mutations[type];\n\n\t\tif (!entry) {\n\t\t\tconsole.error(`[IpcFlux] unknown mutation type: ${type}`);\n\t\t\treturn;\n\t\t}\n\n\t\tflux._withCommit(() => {\n\t\t\tentry.forEach(handler => {\n\t\t\t\thandler(payload);\n\t\t\t});\n\t\t});\n\n\t\tthis._subscribers.forEach(sub => sub(mutation, this.state));\n\t}\n\n\tcommitExternal(_target, _mutation, _payload, _options) {\n\t\tconst flux = this;\n\n\t\tconst arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'mutation'\n\t\t};\n\n\t\tlet { target, mutation, payload, options } = {\n\t\t\ttarget: _target,\n\t\t\tmutation: _mutation,\n\t\t\tpayload: _payload,\n\t\t\toptions: _options\n\t\t};\n\n\t\tif (Process.is('main')) {\n\t\t\tif (typeof target !== 'object' && typeof target !== 'number') {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instance of BrowserWindow or active BrowserWindow id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttarget = typeof target === 'number' ? webContents.fromId(target) : target.webContents;\n\n\t\t\tif (!target.webContents) {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instance of BrowserWindow or active BrowserWindow id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof mutation !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] mutation not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twebContents.fromId(target.webContents.id).send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\tmutation,\n\t\t\t\tpayload,\n\t\t\t\toptions,\n\t\t\t\t// send the target BrowserWindow id for callback and error handling\n\t\t\t\ttarget: target.webContents.id\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\tif (typeof target !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] mutation not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// send a call to the main process to dispatch the action\n\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\tmutation: target,\n\t\t\t\tpayload: mutation,\n\t\t\t\toptions: payload,\n\t\t\t\t// send the current BrowserWindow id for callback and error handling\n\t\t\t\ttarget: remote.getCurrentWindow().id\n\t\t\t});\n\t\t}\n\t}\n\n\tregisterAction(action, handler) {\n\t\tconst flux = this;\n\n\t\t// checks if action is in `_actions` array, if not, create an array at the required key\n\t\tconst entry = Array.isArray(flux._actions[action]) ? flux._actions[action] : flux._actions[action] = [];\n\n\t\t// add the action to the array\n\t\t// note that this allows actions to be created using the same action_name, but with different handlers without being overwritten\n\t\tentry.push((payload, cb) => {\n\t\t\t// add the handler to `_actions`, passing in { dispatch, dispatchExternal } for use within the action, as well as the payload and callback\n\t\t\tlet res = handler({\n\t\t\t\tdispatch: flux.dispatch,\n\t\t\t\tcommit: flux.commit,\n\t\t\t\tcommitExternal: flux.commitExternal,\n\t\t\t\tstate: flux.state\n\t\t\t}, payload, cb);\n\n\t\t\t// if not already a Promise, make it one\n\t\t\tif (!isPromise(res)) {\n\t\t\t\tres = Promise.resolve(res);\n\t\t\t}\n\n\t\t\treturn res;\n\t\t});\n\t}\n\n\tregisterMutation(mutation, handler) {\n\t\tconst flux = this;\n\n\t\tconst entry = Array.isArray(flux._mutations[mutation]) ? flux._mutations[mutation] : flux._mutations[mutation] = [];\n\t\tentry.push((payload) => {\n\t\t\thandler.call(flux, flux.state, payload);\n\t\t});\n\t}\n\n\tregisterGetter(getter, raw) {\n\t\tconst flux = this;\n\n\t\tif (this._getters[getter]) {\n\t\t\tconsole.log('[IpcFlux] duplicate getter key');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._getters[getter] = () => {\n\t\t\treturn raw(flux.state, flux.getters);\n\t\t};\n\t}\n\n\t_withCommit(fn) {\n\t\tconst committing = this._committing;\n\t\tthis._committing = true;\n\t\tfn();\n\t\tthis._committing = committing;\n\t}\n}\n\nexport default IpcFlux;"]}