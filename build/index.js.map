{"version":3,"sources":["../src/index.js"],"names":["Process","assert","isPromise","channels","call","callback","error","state","processes","removeExistingListeners","Object","values","forEach","emitter","removeAllListeners","channel","IpcFlux","options","env","type","Promise","id","actions","mutations","getters","config","undefined","keys","length","is","flux","_id","getCurrentWindow","_committing","_actions","create","_mutations","_getters","_subscribers","_instances","_config","maxListeners","debug","actionRouteHandler","event","arg","target","actionExists","action","act","dispatch","payload","then","sender","send","data","process","fromId","mutationRouteHandler","mutationExists","mutation","commit","routeCall","callType","setMaxListeners","on","uid","errorCallHandler","err","Error","message","console","warn","log","dispatchExternal","commitExternal","resolve","reject","listener","removeListener","registerAction","registerMutation","registerGetter","getter","Boolean","_target","_action","_payload","webContents","entry","all","map","handler","_type","_options","_withCommit","sub","_mutation","Array","isArray","push","cb","res","raw","fn","committing"],"mappings":"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","file":"index.js","sourcesContent":["//\n//     _                  _____\n//    (_)__  ____  ____  / _/ /_ ____ __\n//   / / _ \\/ __/ /___/ / _/ / // /\\ \\ /\n//  /_/ .__/\\__/       /_//_/\\_,_//_\\_\\\n//   /_/\n//\n//\tipc-flux\n//\n//\tgithub - https://github.com/harryparkdotio/ipc-flux\n//\tnpm - https://www.npmjs.com/package/ipc-flux\n//\n//\t@harryparkdotio - harry@harrypark.io\n//\n//\tMIT license\n//\n\nimport { ipcMain, ipcRenderer, webContents, remote } from 'electron';\n\nimport utils from './utils';\n\nconst { Process, assert, isPromise } = utils;\n\n// predefined channels\nconst channels = {\n\tcall: 'IpcFlux-Call',\n\tcallback: 'IpcFlux-Callback',\n\terror: 'IpcFlux-Error',\n\tstate: 'IpcFlux-State',\n\tprocesses: 'IpcFlux-Processes'\n};\n\n// remove all existing IpcFlux listeners\nconst removeExistingListeners = () => {\n\tObject.values(channels).forEach(channel => {\n\t\tProcess.emitter().removeAllListeners(channel);\n\t});\n};\n\nclass IpcFlux {\n\tconstructor(options = {}) {\n\t\tif (Process.env.type() !== 'production') {\n\t\t\t// check if Promises can be used\n\t\t\tassert(typeof Promise === 'undefined', 'Promises are required');\n\t\t}\n\n\t\tremoveExistingListeners();\n\n\t\tconst { id, actions = {}, mutations = {}, getters = {}, config = {}, state } = options;\n\n\t\t// check if state is defined or is an object with something in it\n\t\tassert((state !== undefined || (typeof state === 'object' && Object.keys(state).length > 0)) && Process.is('renderer'), 'initial state must be declared in main process');\n\n\t\t// defined due to `this` being reassigned in arrow functions\n\t\tconst flux = this;\n\n\t\t// window reference id, if no custom id is specified, use the browserWindow id or 'main'\n\t\tthis._id = Process.is('renderer') ? id || remote.getCurrentWindow().id : 'main';\n\n\t\t// define globs used throughout\n\t\tthis._committing = false;\n\t\tthis._actions = Object.create(null);\n\t\tthis._mutations = Object.create(null);\n\t\tthis._getters = Object.create(null);\n\t\tthis._subscribers = [];\n\n\t\tthis._instances = {};\n\n\t\t// state still needs to be defined within renderer instances, just not from initial config, hence the assert above\n\t\tthis.state = Process.is('main') ? state || {} : {};\n\n\t\tthis._config = {\n\t\t\tmaxListeners: 50,\n\t\t\tdebug: false,\n\t\t\t...config\n\t\t};\n\n\t\t// the listener to be called for actions\n\t\tconst actionRouteHandler = (event, arg) => {\n\t\t\tif ((Process.is('main') && arg.target === 'main') || (Process.is('renderer') && arg.target === remote.getCurrentWindow().id )) {\n\t\t\t\tif (flux.actionExists(arg.action)) {\n\t\t\t\t\tconst target = Process.is('renderer') ? remote.getCurrentWindow().id : arg.target;\n\t\t\t\t\tconst act = dispatch.call(flux, target, arg.action, arg.payload);\n\n\t\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t\tact.then(data => {\n\t\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\ttarget\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (Process.is('main') && arg.target !== 'main') {\n\t\t\t\twebContents.fromId(arg.target).send(channels.call, {...arg});\n\t\t\t} else {\n\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] unknown action called from ${arg.process} process, in ${Process.type()} process: ${arg.action}`);\n\t\t\t}\n\n\t\t\tif (flux.actionExists(arg.action)) {\n\t\t\t\tconst target = Process.is('renderer') ? remote.getCurrentWindow().id : arg.target;\n\t\t\t\tconst act = dispatch.call(flux, target, arg.action, arg.payload);\n\n\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t// on Promise complete, send a callback to the dispatcher\n\t\t\t\t\tact.then(data => {\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// send a callback to the dispatcher\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t...arg,\n\t\t\t\t\t\ttarget\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if the action doesn't exist, send an error message back to the caller\n\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] unknown action called from ${arg.process} process, in ${Process.type()} process: ${arg.action}`);\n\t\t\t}\n\t\t};\n\n\t\t// the listener to be called for mutations\n\t\tconst mutationRouteHandler = (event, arg) => {\n\t\t\tif (flux.mutationExists(arg.mutation)) {\n\t\t\t\tcommit.call(flux, arg.mutation, arg.payload);\n\t\t\t}\n\t\t};\n\n\t\t// because a single channel (`channel.call`) is used for all callers, route different calls to their required handler\n\t\tconst routeCall = (event, arg) => {\n\t\t\tif (typeof arg !== 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (arg.callType) {\n\t\t\t// if the call type is an action, let `actionEmitHandler` handle it\n\t\t\tcase 'action':\n\t\t\t\tactionRouteHandler(event, arg);\n\t\t\t\tbreak;\n\t\t\tcase 'mutation':\n\t\t\t\tmutationRouteHandler(event, arg);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t// define the process emitter, minimizes code duplication\n\t\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\t\temitter.setMaxListeners(this._config.maxListeners);\n\n\t\tif (Process.is('main')) {\n\t\t\temitter.on(channels.processes, (event, arg) => {\n\t\t\t\tif (arg.uid === 'main' || arg.uid === 'local') {\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] instance id cannot be 'main' or 'local' (BrowserWindow: ${arg.id})`);\n\t\t\t\t} else if (flux._instances[arg.uid]) {\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] instance id '${arg.uid}' already defined (BrowserWindow: ${arg.id})`);\n\t\t\t\t} else {\n\t\t\t\t\tflux._instances[arg.uid] = arg.id;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (Process.is('renderer')) {\n\t\t\temitter.send(channels.processes, {\n\t\t\t\tuid: flux._id,\n\t\t\t\tid: remote.getCurrentWindow().id\n\t\t\t});\n\t\t}\n\n\t\t// the emitter event handlers for calls and errors\n\t\temitter.on(channels.call, routeCall);\n\n\t\tconst errorCallHandler = (event, err) => {\n\t\t\tif (typeof err === 'object') {\n\t\t\t\tswitch (err.type) {\n\t\t\t\tcase 'throw':\n\t\t\t\t\tthrow new Error(err.message);\n\t\t\t\tcase 'warn':\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'warning':\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'log':\n\t\t\t\t\tconsole.log(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\n\t\temitter.on(channels.error, errorCallHandler);\n\n\t\tconst { dispatch, dispatchExternal, commit, commitExternal } = this;\n\n\t\tthis.dispatch = (target, type, payload) => {\n\t\t\tif (target === 'local') {\n\t\t\t\treturn dispatch.call(flux, target, type, payload);\n\t\t\t} else {\n\t\t\t\tdispatch.call(flux, target, type, payload);\n\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t// only resolve if the action callback is the same as that called, then remove the callback handler\n\t\t\t\t\tconst listener = (event, arg) => {\n\t\t\t\t\t\tif (Process.is('renderer') ? arg.action === target : arg.action === action) {\n\t\t\t\t\t\t\temitter.removeListener(channels.callback, listener);\n\t\t\t\t\t\t\tresolve(arg.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// setup a callback listener\n\t\t\t\t\temitter.on(channels.callback, listener);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tthis.commit = (mutation, payload, options) => {\n\t\t\tcommit.call(flux, mutation, payload, options);\n\t\t};\n\n\t\tthis.commitExternal = (target, mutation, payload, options) => {\n\t\t\t// return a promise of the dispatch, resolving on callback\n\t\t\tcommitExternal.call(flux, target, mutation, payload, options);\n\t\t};\n\n\t\t// register all actions defined in the class constructor options\n\t\tObject.keys(actions).forEach(action => {\n\t\t\tthis.registerAction(action, actions[action]);\n\t\t});\n\n\t\t// register all mutations defined in the class constructor options\n\t\tObject.keys(mutations).forEach(mutation => {\n\t\t\tthis.registerMutation(mutation, mutations[mutation]);\n\t\t});\n\n\t\t// register all getters defined in the class constructor options\n\t\tObject.keys(getters).forEach(getter => {\n\t\t\tthis.registerGetter(getter, getters[getter]);\n\t\t});\n\n\t\tthis.debug = {\n\t\t\tprocess: Process.type(),\n\t\t\tchannels\n\t\t};\n\t}\n\n\tactionExists(action) {\n\t\treturn Boolean(this._actions[action]);\n\t}\n\n\tmutationExists(mutation) {\n\t\treturn Boolean(this._mutations[mutation]);\n\t}\n\n\tdispatch(_target, _action, _payload) {\n\t\tconst flux = this;\n\n\t\tconst { target, action, payload } = {\n\t\t\ttarget: _target,\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tif (target === 'local' || target === remote.webContents().id) {\n\t\t\tconst entry = this._actions[action];\n\n\t\t\tif (!entry) {\n\t\t\t\tconsole.error(`[IpcFlux] unknown action: ${action}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn entry.length > 1 ? Promise.all(entry.map(handler => handler(payload))) : entry[0](payload);\n\t\t} else {\n\t\t\tconst arg = {\n\t\t\t\tprocess: Process.type(),\n\t\t\t\tcallType: 'action'\n\t\t\t};\n\n\t\t\tif (Process.is('main')) {\n\t\t\t\tlet _id = null;\n\n\t\t\t\tif (typeof target === 'number') {\n\t\t\t\t\t_id = typeof target === 'number' ? webContents.fromId(target) || null : null;\n\n\t\t\t\t\tif (_id === null) {\n\t\t\t\t\t\tconsole.error(`[IpcFlux] target window id not valid: ${target}`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (typeof target === 'string') {\n\t\t\t\t\t_id = flux._instances[target] || null;\n\n\t\t\t\t\tif (_id === null) {\n\t\t\t\t\t\tconsole.error(`[IpcFlux] target not defined: ${target}`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (_id === null) {\n\t\t\t\t\tconsole.error('[IpcFlux] target passed as parameter was not BrowserWindow id or a valid ipc-flux reference id');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\twebContents.fromId(_id).send(channels.call, {\n\t\t\t\t\t...arg,\n\t\t\t\t\taction,\n\t\t\t\t\tpayload,\n\t\t\t\t\ttarget: _id\n\t\t\t\t});\n\t\t\t} else if (Process.is('renderer')) {\n\t\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t\t...arg,\n\t\t\t\t\taction,\n\t\t\t\t\tpayload,\n\t\t\t\t\ttarget: _id\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tcommit(_type, _payload, _options) {\n\t\tconst flux = this;\n\n\t\tlet { type, payload, options } = {\n\t\t\ttype: _type,\n\t\t\tpayload: _payload,\n\t\t\toptions: _options\n\t\t};\n\n\t\tconst mutation = { type, payload };\n\t\tconst entry = this._mutations[type];\n\n\t\tif (!entry) {\n\t\t\tconsole.error(`[IpcFlux] unknown mutation type: ${type}`);\n\t\t\treturn;\n\t\t}\n\n\t\tflux._withCommit(() => {\n\t\t\tentry.forEach(handler => {\n\t\t\t\thandler(payload);\n\t\t\t});\n\t\t});\n\n\t\tthis._subscribers.forEach(sub => sub(mutation, this.state));\n\t}\n\n\tcommitExternal(_target, _mutation, _payload, _options) {\n\t\tconst flux = this;\n\n\t\tconst arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'mutation'\n\t\t};\n\n\t\tlet { target, mutation, payload, options } = {\n\t\t\ttarget: _target,\n\t\t\tmutation: _mutation,\n\t\t\tpayload: _payload,\n\t\t\toptions: _options\n\t\t};\n\n\t\tif (Process.is('main')) {\n\t\t\tif (typeof target !== 'object' && typeof target !== 'number') {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instance of BrowserWindow or active BrowserWindow id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttarget = typeof target === 'number' ? webContents.fromId(target) : target.webContents;\n\n\t\t\tif (!target.webContents) {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instance of BrowserWindow or active BrowserWindow id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof mutation !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] mutation not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twebContents.fromId(target.webContents.id).send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\tmutation,\n\t\t\t\tpayload,\n\t\t\t\toptions,\n\t\t\t\t// send the target BrowserWindow id for callback and error handling\n\t\t\t\ttarget: target.webContents.id\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\tif (typeof target !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] mutation not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// send a call to the main process to dispatch the action\n\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\tmutation: target,\n\t\t\t\tpayload: mutation,\n\t\t\t\toptions: payload,\n\t\t\t\t// send the current BrowserWindow id for callback and error handling\n\t\t\t\ttarget: remote.getCurrentWindow().id\n\t\t\t});\n\t\t}\n\t}\n\n\tregisterAction(action, handler) {\n\t\tconst flux = this;\n\n\t\t// checks if action is in `_actions` array, if not, create an array at the required key\n\t\tconst entry = Array.isArray(flux._actions[action]) ? flux._actions[action] : flux._actions[action] = [];\n\n\t\t// add the action to the array\n\t\t// note that this allows actions to be created using the same action_name, but with different handlers without being overwritten\n\t\tentry.push((payload, cb) => {\n\t\t\t// add the handler to `_actions`, passing in { dispatch, dispatchExternal } for use within the action, as well as the payload and callback\n\t\t\tlet res = handler({\n\t\t\t\tdispatch: flux.dispatch,\n\t\t\t\tcommit: flux.commit,\n\t\t\t\tcommitExternal: flux.commitExternal,\n\t\t\t\tstate: flux.state\n\t\t\t}, payload, cb);\n\n\t\t\t// if not already a Promise, make it one\n\t\t\tif (!isPromise(res)) {\n\t\t\t\tres = Promise.resolve(res);\n\t\t\t}\n\n\t\t\treturn res;\n\t\t});\n\t}\n\n\tregisterMutation(mutation, handler) {\n\t\tconst flux = this;\n\n\t\tconst entry = Array.isArray(flux._mutations[mutation]) ? flux._mutations[mutation] : flux._mutations[mutation] = [];\n\t\tentry.push((payload) => {\n\t\t\thandler.call(flux, flux.state, payload);\n\t\t});\n\t}\n\n\tregisterGetter(getter, raw) {\n\t\tconst flux = this;\n\n\t\tif (this._getters[getter]) {\n\t\t\tconsole.log('[IpcFlux] duplicate getter key');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._getters[getter] = () => {\n\t\t\treturn raw(flux.state, flux.getters);\n\t\t};\n\t}\n\n\t_withCommit(fn) {\n\t\tconst committing = this._committing;\n\t\tthis._committing = true;\n\t\tfn();\n\t\tthis._committing = committing;\n\t}\n}\n\nexport default IpcFlux;"]}