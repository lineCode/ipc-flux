{"version":3,"sources":["../src/index.js"],"names":["Process","assert","isPromise","channels","call","callback","error","state","processes","removeExistingListeners","Object","values","forEach","emitter","removeAllListeners","channel","checkActiveInstance","check","getAllWebContents","map","contents","id","indexOf","genCallbackId","Math","random","toString","substring","IpcFlux","options","env","type","Promise","actions","mutations","getters","config","undefined","keys","length","is","flux","_id","getCurrentWindow","_committing","_actions","create","_mutations","_getters","_subscribers","_instances","_config","maxListeners","debug","eventHandlers","action","event","arg","target","actionExists","act","dispatch","payload","then","sender","send","data","process","cbid","fromId","listener","removeListener","resolve","on","mutation","mutationExists","commit","callHandler","callType","setMaxListeners","defineInstances","uid","errorCallHandler","err","Error","message","console","warn","log","commitExternal","registerAction","registerMutation","registerGetter","getter","Boolean","_target","_action","_payload","_cbid","entry","all","handler","caller","webContents","_type","_options","_withCommit","sub","_mutation","Array","isArray","push","cb","res","raw","fn","committing"],"mappings":"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","file":"index.js","sourcesContent":["//\n//     _                  _____\n//    (_)__  ____  ____  / _/ /_ ____ __\n//   / / _ \\/ __/ /___/ / _/ / // /\\ \\ /\n//  /_/ .__/\\__/       /_//_/\\_,_//_\\_\\\n//   /_/\n//\n//\tipc-flux\n//\n//\tgithub - https://github.com/harryparkdotio/ipc-flux\n//\tnpm - https://www.npmjs.com/package/ipc-flux\n//\n//\t@harryparkdotio - harry@harrypark.io\n//\n//\tMIT license\n//\n\nimport { ipcMain, ipcRenderer, webContents, remote } from 'electron';\n\nimport utils from './utils';\n\nconst { Process, assert, isPromise } = utils;\n\n// predefined channels\nconst channels = {\n\tcall: 'IpcFlux-Call',\n\tcallback: 'IpcFlux-Callback',\n\terror: 'IpcFlux-Error',\n\tstate: 'IpcFlux-State',\n\tprocesses: 'IpcFlux-Processes'\n};\n\n// remove all existing IpcFlux listeners\nconst removeExistingListeners = () => {\n\tObject.values(channels).forEach(channel => {\n\t\tProcess.emitter().removeAllListeners(channel);\n\t});\n};\n\nconst checkActiveInstance = (check) => {\n\treturn webContents.getAllWebContents().map(contents => contents.id).indexOf(check) >= 0;\n};\n\nconst genCallbackId = () => {\n\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};\n\nclass IpcFlux {\n\tconstructor(options = {}) {\n\t\tif (Process.env.type() !== 'production') {\n\t\t\t// check if Promises can be used\n\t\t\tassert(typeof Promise === 'undefined', 'Promises are required');\n\t\t}\n\n\t\tremoveExistingListeners();\n\n\t\tconst { id, actions = {}, mutations = {}, getters = {}, config = {}, state } = options;\n\n\t\t// check if state is defined or is an object with something in it\n\t\tassert((state !== undefined || (typeof state === 'object' && Object.keys(state).length > 0)) && Process.is('renderer'), 'initial state must be declared in main process');\n\n\t\t// defined due to `this` being reassigned in arrow functions\n\t\tconst flux = this;\n\n\t\t// window reference id, if no custom id is specified, use the browserWindow id or 'main'\n\t\tthis._id = Process.is('renderer') ? id || remote.getCurrentWindow().id : 'main';\n\n\t\t// define globs used throughout\n\t\tthis._committing = false;\n\t\tthis._actions = Object.create(null);\n\t\tthis._mutations = Object.create(null);\n\t\tthis._getters = Object.create(null);\n\t\tthis._subscribers = [];\n\n\t\tthis._instances = {};\n\n\t\t// state still needs to be defined within renderer instances, just not from initial config, hence the assert above\n\t\tthis.state = Process.is('main') ? state || {} : {};\n\n\t\tthis._config = {\n\t\t\tmaxListeners: 50,\n\t\t\tdebug: false,\n\t\t\t...config\n\t\t};\n\n\t\tconst eventHandlers = {\n\t\t\taction: (event, arg) => {\n\t\t\t\tif (arg.target === 'main' || Process.is('renderer')) {\n\t\t\t\t\tif (flux.actionExists(arg.action)) {\n\t\t\t\t\t\tconst act = Process.is('renderer') ? flux.dispatch('local', arg.action, arg.payload) : dispatch.call(flux, arg.target, arg.action, arg.payload);\n\n\t\t\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t\t\tact.then(data => {\n\t\t\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\t\ttarget\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst target = typeof arg.target === 'string' ? flux._instances[arg.target] : arg.target;\n\t\t\t\t\tconst cbid = arg.callback;\n\n\t\t\t\t\tif (!checkActiveInstance(target)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\twebContents.fromId(target).send(channels.call, {...arg});\n\n\t\t\t\t\tconst act = new Promise(resolve => {\n\t\t\t\t\t\tconst listener = (event, arg) => {\n\t\t\t\t\t\t\tif (arg.target === target && arg.callback === cbid) {\n\t\t\t\t\t\t\t\tipcMain.removeListener(channels.callback, listener);\n\t\t\t\t\t\t\t\tresolve(arg.data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tipcMain.on(channels.callback, listener);\n\t\t\t\t\t});\n\n\t\t\t\t\tact.then(data => {\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tmutation: (event, arg) => {\n\t\t\t\tif (flux.mutationExists(arg.mutation)) {\n\t\t\t\t\tcommit.call(flux, arg.mutation, arg.payload);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// because a single channel (`channel.call`) is used for all callers, route different calls to their required handler\n\t\tconst callHandler = (event, arg) => {\n\t\t\tif (typeof arg !== 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (arg.callType) {\n\t\t\t\tcase 'action':\n\t\t\t\t\teventHandlers.action(event, arg);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'mutation':\n\t\t\t\t\teventHandlers.mutation(event, arg);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t// define the process emitter, minimizes code duplication\n\t\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\t\temitter.setMaxListeners(this._config.maxListeners);\n\n\t\tconst defineInstances = () => {\n\t\t\tif (Process.is('main')) {\n\t\t\t\tipcMain.on(channels.processes, (event, arg) => {\n\t\t\t\t\tif (arg.uid === 'main' || arg.uid === 'local') {\n\t\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] instance id cannot be 'main' or 'local' (BrowserWindow: ${arg.id})`);\n\t\t\t\t\t} else if (flux._instances[arg.uid]) {\n\t\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] instance id '${arg.uid}' already defined (BrowserWindow: ${arg.id})`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflux._instances[arg.uid] = arg.id;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tipcRenderer.send(channels.processes, {\n\t\t\t\t\tuid: flux._id,\n\t\t\t\t\tid: remote.getCurrentWindow().id || null\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tdefineInstances();\n\n\t\t// the emitter event handlers for calls and errors\n\t\temitter.on(channels.call, callHandler);\n\n\t\tconst errorCallHandler = (event, err) => {\n\t\t\tif (typeof err === 'object') {\n\t\t\t\tswitch (err.type) {\n\t\t\t\t\tcase 'throw':\n\t\t\t\t\t\tthrow new Error(err.message);\n\t\t\t\t\tcase 'warn':\n\t\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'warning':\n\t\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'log':\n\t\t\t\t\t\tconsole.log(err.message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t};\n\n\t\temitter.on(channels.error, errorCallHandler);\n\n\t\tconst { dispatch, commit, commitExternal } = this;\n\n\t\tthis.dispatch = (target, type, payload) => {\n\t\t\tif (target === 'local' || (!Process.is('main') && target === remote.getCurrentWindow().id)) {\n\t\t\t\treturn dispatch.call(flux, target, type, payload);\n\t\t\t} else {\n\t\t\t\tconst cbid = genCallbackId();\n\n\t\t\t\tdispatch.call(flux, target, type, payload, cbid);\n\n\t\t\t\treturn new Promise((resolve) => {\n\t\t\t\t\t// only resolve if the action callback is the same as that called, then remove the callback handler\n\t\t\t\t\tconst listener = (event, arg) => {\n\t\t\t\t\t\tif (arg.target === target && arg.callback == cbid) {\n\t\t\t\t\t\t\temitter.removeListener(channels.callback, listener);\n\t\t\t\t\t\t\tresolve(arg.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// setup a callback listener\n\t\t\t\t\temitter.on(channels.callback, listener);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tthis.commit = (mutation, payload, options) => {\n\t\t\tcommit.call(flux, mutation, payload, options);\n\t\t};\n\n\t\tthis.commitExternal = (target, mutation, payload, options) => {\n\t\t\t// return a promise of the dispatch, resolving on callback\n\t\t\tcommitExternal.call(flux, target, mutation, payload, options);\n\t\t};\n\n\t\t// register all actions defined in the class constructor options\n\t\tObject.keys(actions).forEach(action => {\n\t\t\tthis.registerAction(action, actions[action]);\n\t\t});\n\n\t\t// register all mutations defined in the class constructor options\n\t\tObject.keys(mutations).forEach(mutation => {\n\t\t\tthis.registerMutation(mutation, mutations[mutation]);\n\t\t});\n\n\t\t// register all getters defined in the class constructor options\n\t\tObject.keys(getters).forEach(getter => {\n\t\t\tthis.registerGetter(getter, getters[getter]);\n\t\t});\n\n\t\tthis.debug = {\n\t\t\tprocess: Process.type(),\n\t\t\tchannels\n\t\t};\n\t}\n\n\tactionExists(action) {\n\t\treturn Boolean(this._actions[action]);\n\t}\n\n\tmutationExists(mutation) {\n\t\treturn Boolean(this._mutations[mutation]);\n\t}\n\n\tdispatch(_target, _action, _payload, _cbid) {\n\t\tconst flux = this;\n\n\t\tconst { target, action, payload, cbid } = {\n\t\t\ttarget: _target,\n\t\t\taction: _action,\n\t\t\tpayload: _payload,\n\t\t\tcbid: _cbid\n\t\t};\n\n\t\tif (target === 'local' || (Process.is('main') && target === 'main') || (!Process.is('main') && target === remote.getCurrentWindow().id)) {\n\t\t\tconst entry = this._actions[action];\n\n\t\t\tif (!entry) {\n\t\t\t\tconsole.error(`[IpcFlux] unknown action: ${action}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn entry.length > 1 ? Promise.all(entry.map(handler => handler(payload))) : entry[0](payload);\n\t\t} else {\n\t\t\tconst arg = {\n\t\t\t\tprocess: Process.type(),\n\t\t\t\tcaller: Process.is('renderer') ? remote.getCurrentWindow().id : 'main',\n\t\t\t\tcallType: 'action'\n\t\t\t};\n\n\t\t\tlet _id = (typeof target === 'number' ? target : typeof target === 'string' ? target : null) || null;\n\n\t\t\tif (_id === null) {\n\t\t\t\tconsole.error('[IpcFlux] target passed as parameter was not BrowserWindow id or a valid ipc-flux reference id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!Process.is('renderer') && !checkActiveInstance(_id)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst emitter = Process.is('main') ? webContents.fromId(_id).webContents : ipcRenderer;\n\n\t\t\temitter.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction,\n\t\t\t\tpayload,\n\t\t\t\ttarget: _id,\n\t\t\t\tcallback: cbid\n\t\t\t});\n\t\t}\n\t}\n\n\tcommit(_type, _payload, _options) {\n\t\tconst flux = this;\n\n\t\tlet { type, payload, options } = {\n\t\t\ttype: _type,\n\t\t\tpayload: _payload,\n\t\t\toptions: _options\n\t\t};\n\n\t\tconst mutation = { type, payload };\n\t\tconst entry = this._mutations[type];\n\n\t\tif (!entry) {\n\t\t\tconsole.error(`[IpcFlux] unknown mutation type: ${type}`);\n\t\t\treturn;\n\t\t}\n\n\t\tflux._withCommit(() => {\n\t\t\tentry.forEach(handler => {\n\t\t\t\thandler(payload);\n\t\t\t});\n\t\t});\n\n\t\tthis._subscribers.forEach(sub => sub(mutation, this.state));\n\t}\n\n\tcommitExternal(_target, _mutation, _payload, _options) {\n\t\tconst flux = this;\n\n\t\tconst arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'mutation'\n\t\t};\n\n\t\tlet { target, mutation, payload, options } = {\n\t\t\ttarget: _target,\n\t\t\tmutation: _mutation,\n\t\t\tpayload: _payload,\n\t\t\toptions: _options\n\t\t};\n\n\t\tif (Process.is('main')) {\n\t\t\tif (typeof target !== 'object' && typeof target !== 'number') {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instance of BrowserWindow or active BrowserWindow id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttarget = typeof target === 'number' ? webContents.fromId(target) : target.webContents;\n\n\t\t\tif (!target.webContents) {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instance of BrowserWindow or active BrowserWindow id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof mutation !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] mutation not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twebContents.fromId(target.webContents.id).send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\tmutation,\n\t\t\t\tpayload,\n\t\t\t\toptions,\n\t\t\t\ttarget: target.webContents.id\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\tif (typeof target !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] mutation not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// send a call to the main process to dispatch the action\n\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\tmutation: target,\n\t\t\t\tpayload: mutation,\n\t\t\t\toptions: payload,\n\t\t\t\ttarget: remote.getCurrentWindow().id\n\t\t\t});\n\t\t}\n\t}\n\n\tregisterAction(action, handler) {\n\t\tconst flux = this;\n\n\t\t// checks if action is in `_actions` array, if not, create an array at the required key\n\t\tconst entry = Array.isArray(flux._actions[action]) ? flux._actions[action] : flux._actions[action] = [];\n\n\t\t// add the action to the array\n\t\t// note that this allows actions to be created using the same action_name, but with different handlers without being overwritten\n\t\tentry.push((payload, cb) => {\n\t\t\t// add the handler to `_actions`, passing in { dispatch, dispatchExternal } for use within the action, as well as the payload and callback\n\t\t\tlet res = handler({\n\t\t\t\tdispatch: flux.dispatch,\n\t\t\t\tcommit: flux.commit,\n\t\t\t\tcommitExternal: flux.commitExternal,\n\t\t\t\tstate: flux.state\n\t\t\t}, payload, cb);\n\n\t\t\t// if not already a Promise, make it one\n\t\t\tif (!isPromise(res)) {\n\t\t\t\tres = Promise.resolve(res);\n\t\t\t}\n\n\t\t\treturn res;\n\t\t});\n\t}\n\n\tregisterMutation(mutation, handler) {\n\t\tconst flux = this;\n\n\t\tconst entry = Array.isArray(flux._mutations[mutation]) ? flux._mutations[mutation] : flux._mutations[mutation] = [];\n\n\t\tentry.push((payload) => {\n\t\t\thandler.call(flux, flux.state, payload);\n\t\t});\n\t}\n\n\tregisterGetter(getter, raw) {\n\t\tconst flux = this;\n\n\t\tif (this._getters[getter]) {\n\t\t\tconsole.log('[IpcFlux] duplicate getter key');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._getters[getter] = () => {\n\t\t\treturn raw(flux.state, flux.getters);\n\t\t};\n\t}\n\n\t_withCommit(fn) {\n\t\tconst committing = this._committing;\n\t\tthis._committing = true;\n\t\tfn();\n\t\tthis._committing = committing;\n\t}\n}\n\nexport default IpcFlux;"]}