{"version":3,"sources":["../src/index.js"],"names":["Process","assert","isPromise","channels","call","callback","error","rmListeners","emitter","is","Object","values","forEach","removeAllListeners","channel","IpcFlux","options","env","type","Promise","actions","config","state","keys","length","instance","_actions","create","_config","maxListeners","debug","actionEmitHandler","event","arg","actionExists","action","target","getCurrentWindow","id","act","dispatch","payload","then","sender","send","data","process","emitterCallListener","callType","setMaxListeners","on","err","Error","message","console","warn","log","dispatchExternal","resolve","reject","listener","removeListener","registerAction","Boolean","_caller","_action","_payload","entry","all","map","handler","_target","fromId","webContents","Array","isArray","push","cb","res"],"mappings":"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","file":"index.js","sourcesContent":["//\n//     _                  _____\n//    (_)__  ____  ____  / _/ /_ ____ __\n//   / / _ \\/ __/ /___/ / _/ / // /\\ \\ /\n//  /_/ .__/\\__/       /_//_/\\_,_//_\\_\\\n//   /_/\n//\n//\tipc-flux\n//\n//\tgithub - https://github.com/harryparkdotio/ipc-flux\n//\tnpm - https://www.npmjs.com/package/ipc-flux\n//\n//\t@harryparkdotio - harry@harrypark.io\n//\n//\tMIT license\n//\n//\n\nimport { ipcMain, ipcRenderer, webContents, remote } from 'electron';\n\nimport utils from './utils';\n\nconst { Process, assert, isPromise } = utils;\n\n// predefined channels\nconst channels = {\n\tcall: 'IpcFlux-Call',\n\tcallback: 'IpcFlux-Callback',\n\terror: 'IpcFlux-Error'\n};\n\n// remove all existing IpcFlux listeners\nconst rmListeners = () => {\n\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\tObject.values(channels).forEach(channel => {\n\t\temitter.removeAllListeners(channel);\n\t});\n};\n\nclass IpcFlux {\n\tconstructor(options = {}) {\n\t\tif (Process.env.type() !== 'production') {\n\t\t\t// check if Promises can be used\n\t\t\tassert(typeof Promise === 'undefined', '[IpcFlux] requires Promises to function.');\n\t\t}\n\n\t\t// remove IpcFlux listeners\n\t\trmListeners();\n\n\t\tconst { actions = {}, config = {}, state = {} } = options;\n\n\t\tassert(Object.keys(state).length > 0 && Process.is('renderer'), '[IpcFlux] state must be declared in main process');\n\n\t\t// defined due to `this` being reassigned in arrow functions (grr)\n\t\tconst instance = this;\n\n\t\tthis._actions = Object.create(null);\n\t\tthis._config = Object.create(null);\n\n\t\tthis._config = {\n\t\t\tmaxListeners: 50,\n\t\t\tdebug: false,\n\t\t\t...config\n\t\t};\n\n\t\t// the listener to be called for actions\n\t\tconst actionEmitHandler = (event, arg) => {\n\t\t\tif (instance.actionExists(arg.action)) {\n\t\t\t\tconst target = Process.is('renderer') ? remote.getCurrentWindow().id : arg.target;\n\n\t\t\t\tconst act = dispatch.call(instance, { ...arg, target }, arg.action, arg.payload);\n\n\t\t\t\tif (isPromise(act)) {\n\t\t\t\t\t// on Promise complete, send a callback to the dispatcher\n\t\t\t\t\tact.then(data => {\n\t\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t\t...arg,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// send a callback to the dispatcher\n\t\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] '${arg.action}' action called from ${arg.process} process, in ${Process.type()} process, did not return a Promise`);\n\t\t\t\t\tevent.sender.send(channels.callback, {\n\t\t\t\t\t\t...arg,\n\t\t\t\t\t\ttarget\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if the action doesn't exist, send an error message back to the caller\n\t\t\t\tevent.sender.send(channels.error, `[IpcFlux] unknown action called from ${arg.process} process, in ${Process.type()} process: ${arg.action}`);\n\t\t\t}\n\t\t};\n\n\t\t// run on `channel.call`\n\t\tconst emitterCallListener = (event, arg) => {\n\t\t\tif (typeof arg !== 'object') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (arg.callType) {\n\t\t\t// if the call type is an action, let `actionEmitHandler` handle it\n\t\t\tcase 'action':\n\t\t\t\tactionEmitHandler(event, arg);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t// define the process emitter, minimizes code duplication\n\t\tconst emitter = Process.is('main') ? ipcMain : ipcRenderer;\n\n\t\temitter.setMaxListeners(this._config.maxListeners);\n\n\t\t// the emitter event handlers for calls and errors\n\t\temitter.on(channels.call, emitterCallListener);\n\n\t\temitter.on(channels.error, (event, err) => {\n\t\t\tif (typeof err === 'object') {\n\t\t\t\tswitch (err.type) {\n\t\t\t\tcase 'throw':\n\t\t\t\t\tthrow new Error(err.message);\n\t\t\t\tcase 'warn':\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'warning':\n\t\t\t\t\tconsole.warn(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'log':\n\t\t\t\t\tconsole.log(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error(err.message);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\n\t\tconst { dispatch, dispatchExternal } = this;\n\n\t\tthis.dispatch = (type, payload) => {\n\t\t\treturn dispatch.call(instance, {\n\t\t\t\tprocess: Process.type(),\n\t\t\t\ttarget: Process.is('renderer') ? remote.getCurrentWindow().id : 0\n\t\t\t}, type, payload);\n\t\t};\n\n\t\tthis.dispatchExternal = (target, action, payload) => {\n\t\t\t// return a promise of the dispatch, resolving on callback\n\t\t\tdispatchExternal.call(instance, target, action, payload);\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t// only resolve if the action callback is the same as that called, then remove the callback handler\n\t\t\t\tconst listener = (event, arg) => {\n\t\t\t\t\tif (Process.is('renderer') ? arg.action === target : arg.action === action) {\n\t\t\t\t\t\temitter.removeListener(channels.callback, listener);\n\t\t\t\t\t\tresolve(arg.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// setup a callback listener\n\t\t\t\temitter.on(channels.callback, listener);\n\t\t\t});\n\t\t};\n\n\t\t// register all actions defined in the class constructor options\n\t\tObject.keys(actions).forEach(action => {\n\t\t\tthis.registerAction(action, actions[action]);\n\t\t});\n\n\t\tthis.debug = {\n\t\t\tprocess: Process.type(),\n\t\t\tchannels\n\t\t};\n\t}\n\n\tactionExists(action) {\n\t\treturn Boolean(this._actions[action]);\n\t}\n\n\tdispatch(_caller, _action, _payload) {\n\t\tconst { action, payload } = {\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tconst entry = this._actions[action];\n\n\t\t// if no action was found\n\t\tif (!entry) {\n\t\t\t// action was dispatched from this process, show the error in this process\n\t\t\tif (_caller.process === Process.type()) {\n\t\t\t\tconsole.error(`[IpcFlux] unknown action: ${action}`);\n\t\t\t}\n\t\t\t// action existence is checked in `actionListener` above, as we don't know the actions defined in the other process\n\t\t\treturn;\n\t\t}\n\n\t\t// return a promise of the action function\n\t\treturn entry.length > 1 ? Promise.all(entry.map(handler => handler(payload))) : entry[0](payload);\n\t}\n\n\tdispatchExternal(_target, _action, _payload) {\n\t\t// same for both process types\n\t\tconst arg = {\n\t\t\tprocess: Process.type(),\n\t\t\tcallType: 'action'\n\t\t};\n\n\t\tlet { target, action, payload } = {\n\t\t\ttarget: _target,\n\t\t\taction: _action,\n\t\t\tpayload: _payload\n\t\t};\n\n\t\tif (Process.is('main')) {\n\t\t\t// checks target is an instance of BrowserWindow, or if is a BrowserWindow id\n\t\t\tif (typeof target !== 'object' && typeof target !== 'number') {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not instanceof BrowserWindow or an active BrowserWindow\\'s id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// converts BrowserWindow or BrowserWindow id to webContents for instance checking\n\t\t\ttarget = typeof target === 'number' ? webContents.fromId(target) : target.webContents;\n\n\t\t\tif (!target.webContents) {\n\t\t\t\tconsole.error('[IpcFlux] target passed is not an instanceof BrowserWindow or an active BrowserWindow\\'s id');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof action !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twebContents.fromId(target.webContents.id).send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction,\n\t\t\t\tpayload,\n\t\t\t\t// send the target BrowserWindow id for callback and error handling\n\t\t\t\ttarget: target.webContents.id\n\t\t\t});\n\t\t} else if (Process.is('renderer')) {\n\t\t\tif (typeof target !== 'string') {\n\t\t\t\tconsole.error('[IpcFlux] action not passed as parameter');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// send a call to the main process to dispatch the action\n\t\t\tipcRenderer.send(channels.call, {\n\t\t\t\t...arg,\n\t\t\t\taction: target,\n\t\t\t\tpayload: action,\n\t\t\t\t// send the current BrowserWindow id for callback and error handling\n\t\t\t\ttarget: remote.getCurrentWindow().id\n\t\t\t});\n\t\t}\n\t}\n\n\tregisterAction(action, handler) {\n\t\tconst instance = this;\n\n\t\t// checks if action is in `_actions` array, if not, create an array at the required key\n\t\tconst entry = Array.isArray(instance._actions[action]) ? instance._actions[action] : instance._actions[action] = [];\n\n\t\t// add the action to the array\n\t\t// note that this allows actions to be created using the same action_name, but with different handlers without being overwritten\n\t\tentry.push((payload, cb) => {\n\t\t\t// add the handler to `_actions`, passing in { dispatch, dispatchExternal } for use within the action, as well as the payload and callback\n\t\t\tlet res = handler({\n\t\t\t\tdispatch: instance.dispatch,\n\t\t\t\tdispatchExternal: instance.dispatchExternal\n\t\t\t}, payload, cb);\n\n\t\t\t// if not already a Promise, make it one\n\t\t\tif (!isPromise(res)) {\n\t\t\t\tres = Promise.resolve(res);\n\t\t\t}\n\n\t\t\treturn res;\n\t\t});\n\t}\n}\n\nexport default IpcFlux;"]}