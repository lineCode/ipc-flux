{"version":3,"sources":["../src/utils.js"],"names":["isPromise","val","then","assert","condition","msg","Error","Process","type","process","is","env","NODE_ENV"],"mappings":";;;;;;;;AAAA,IAAMA,YAAY,SAAZA,SAAY,MAAO;AACxB,QAAOC,OAAO,OAAOA,IAAIC,IAAX,KAAoB,UAAlC;AACA,CAFD;;AAIA,IAAMC,SAAS,SAATA,MAAS,CAACC,SAAD,EAAYC,GAAZ,EAAoB;AAClC,KAAID,SAAJ,EAAe;AACd,QAAM,IAAIE,KAAJ,gBAAuBD,GAAvB,CAAN;AACA;AACD,CAJD;;AAMA;AACA,IAAME,UAAU;AACf;AACAC,OAAM,gBAAM;AACX;AACA,MAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AACnC,UAAO,UAAP;AACA;;AAED;AACA,MAAI,CAACA,OAAL,EAAc;AACb,UAAO,UAAP;AACA;;AAED;AACA,MAAI,CAACA,QAAQD,IAAb,EAAmB;AAClB,UAAO,MAAP;AACA;;AAED,SAAOC,QAAQD,IAAR,KAAiB,UAAjB,GAA8B,UAA9B,GAA2C,MAAlD;AACA,EAnBc;AAoBf;AACAE,KAAI,kBAAQ;AACX,SAAOF,SAASD,QAAQC,IAAR,EAAhB;AACA,EAvBc;AAwBf;AACAG,MAAK;AACJH,QAAM,gBAAM;AACX,OAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AACnC,WAAO,EAAP;AACA;;AAED,OAAI,QAAOA,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AAChC,WAAO,EAAP;AACA;;AAED,OAAI,QAAOA,QAAQE,GAAf,MAAuB,QAA3B,EAAqC;AACpC,WAAO,EAAP;AACA;;AAED,OAAI,OAAOF,QAAQE,GAAR,CAAYC,QAAnB,KAAgC,WAApC,EAAiD;AAChD,WAAO,EAAP;AACA;;AAED,UAAOH,QAAQE,GAAR,CAAYC,QAAnB;AACA,GAnBG;AAoBJF,MAAI,kBAAQ;AACX,UAAOF,SAASD,QAAQI,GAAR,CAAYH,IAAZ,EAAhB;AACA;AAtBG;AAzBU,CAAhB;;kBAmDe;AACdR,qBADc;AAEdG,eAFc;AAGdI;AAHc,C","file":"utils.js","sourcesContent":["const isPromise = val => {\n\treturn val && typeof val.then === 'function';\n};\n\nconst assert = (condition, msg) => {\n\tif (condition) {\n\t\tthrow new Error(`[IpcFlux] ${msg}`);\n\t}\n};\n\n// determines process originating from\nconst Process = {\n\t// return the type of process as a string\n\ttype: () => {\n\t\t// running in browser/electron window\n\t\tif (typeof process === 'undefined') {\n\t\t\treturn 'renderer';\n\t\t}\n\n\t\t// node-integration disabled\n\t\tif (!process) {\n\t\t\treturn 'renderer';\n\t\t}\n\n\t\t// node.js\n\t\tif (!process.type) {\n\t\t\treturn 'main';\n\t\t}\n\n\t\treturn process.type === 'renderer' ? 'renderer' : 'main';\n\t},\n\t// explicit process type checking\n\tis: type => {\n\t\treturn type === Process.type();\n\t},\n\t// environment checking\n\tenv: {\n\t\ttype: () => {\n\t\t\tif (typeof process === 'undefined') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tif (typeof process !== 'object') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tif (typeof process.env !== 'object') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tif (typeof process.env.NODE_ENV === 'undefined') {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\treturn process.env.NODE_ENV;\n\t\t},\n\t\tis: type => {\n\t\t\treturn type === Process.env.type();\n\t\t}\n\t}\n};\n\nexport default {\n\tisPromise,\n\tassert,\n\tProcess\n};"]}